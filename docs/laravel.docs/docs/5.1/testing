<!doctype html>
<html lang="zh-CN">

<head>
    <meta charset="utf-8">
    <title>Testing - Laravel 5.1 中文文档 | Laravel 中文网</title>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta name="author" content="Laravel 中文网">
    <meta name="description" content="Laravel - 为 WEB 艺术家创造的 PHP 框架。| Laravel 中文网">
    <meta name="keywords" content="Laravel中文社区,php框架,laravel中文网,php framework,restful routing,laravel,laravel php">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!--[if lte IE 9]>
		<script src="http://cdn.bootcss.com/html5shiv/3.7.2/html5shiv.min.js"></script>
	<![endif]-->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="../../assets/css/laravel.css">
    <link rel="stylesheet" href="../../assets/css/patch.css">
</head>

<body class="docs language-php">

    <span class="overlay"></span>

    <nav class="main">
        <div class="container">
            <a href="http://www.golaravel.com/laravel/" class="brand">
                <img src="../../assets/img/laravel-logo.png" height="30"> Laravel
            </a>

            <div class="responsive-sidebar-nav">
                <a href="testing#" class="toggle-slide menu-link btn">&#9776;</a>
            </div>

            <div class="switcher">
                <div class="dropdown">
                    <button class="btn dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-expanded="true">
                        <!--<span class="faint">v</span> -->
                        5.1
                        <span class="caret"></span>
                    </button>
                    <ul class="dropdown-menu" role="menu" aria-labelledby="dropdownMenu1">
                        <li role="presentation">
                            <a role="menuitem" tabindex="-1" href="index.html">5.1</a>
                        </li>
                        <li role="presentation">
                            <a role="menuitem" tabindex="-1" href="http://www.golaravel.com/laravel/docs/5.0">5.0</a>
                        </li>
                        <li role="presentation">
                            <a role="menuitem" tabindex="-1" href="http://www.golaravel.com/laravel/docs/4.2">4.2</a>
                        </li>
                        <li role="presentation">
                            <a role="menuitem" tabindex="-1" href="http://www.golaravel.com/laravel/docs/4.1">4.1</a>
                        </li>
                        <li role="presentation">
                            <a role="menuitem" tabindex="-1" href="http://www.golaravel.com/laravel/docs/4.0">4.0</a>
                        </li>
                    </ul>
                </div>
            </div>

            <ul class="main-nav">
                <li class="nav-docs"><a href="http://www.golaravel.com/laravel/docs/">中文文档</a>
                </li>
                <li class="nav-community"><a href="http://wenda.golaravel.com" target="_blank">问答社区</a>
                </li>
                <li class="nav-api"><a href="http://laravel.com/api/5.0/" target="_blank">API</a>
                </li>
                <li class="nav-laracasts"><a href="https://laracasts.com" target="_blank">视频教程（国外）</a>
                </li>
                <li class="nav-forge"><a href="https://forge.laravel.com" target="_blank">Forge</a>
                </li>

            </ul>
        </div>
    </nav>

    <nav id="slide-menu" class="slide-menu" role="navigation">

        <div class="brand">
            <a href="http://www.golaravel.com/laravel/">
                <img src="../../assets/img/laravel-logo-white.png" height="50">
            </a>
        </div>

        <ul class="slide-main-nav">
            <li><a href="http://www.golaravel.com/laravel/">首页</a>
            </li>
            <li class="nav-docs"><a href="http://www.golaravel.com/laravel/docs/">中文文档</a>
            </li>
            <li class="nav-community"><a href="http://wenda.golaravel.com" target="_blank">问答社区</a>
            </li>
            <li class="nav-api"><a href="http://laravel.com/api/5.0/" target="_blank">API</a>
            </li>
            <li class="nav-laracasts"><a href="https://laracasts.com" target="_blank">视频教程（国外）</a>
            </li>
            <li class="nav-forge"><a href="https://forge.laravel.com" target="_blank">Forge</a>
            </li>

        </ul>

        <div class="slide-docs-nav">
            <h2>文档目录</h2>
            <ul>
                <li>序言
                    <ul>
                        <li><a href="releases">版本说明</a>
                        </li>
                        <li><a href="upgrade">升级指南</a>
                        </li>
                        <li><a href="contributions">贡献指南</a>
                        </li>
                        <li><a href="http://www.golaravel.com/laravel/api/5.1">API 文档</a>
                        </li>
                    </ul>
                </li>
                <li>安装设置
                    <ul>
                        <li><a href="installation">安装</a>
                        </li>
                        <li><a href="homestead">Homestead</a>
                        </li>
                    </ul>
                </li>
                <li>教程
                    <ul>
                        <li><a href="quickstart">入门学习任务</a>
                        </li>
                        <li><a href="quickstart-intermediate">中级学习任务</a>
                        </li>
                    </ul>
                </li>
                <li>基础知识
                    <ul>
                        <li><a href="routing">路由</a>
                        </li>
                        <li><a href="middleware">中间件</a>
                        </li>
                        <li><a href="controllers">控制器</a>
                        </li>
                        <li><a href="requests">请求</a>
                        </li>
                        <li><a href="responses">响应</a>
                        </li>
                        <li><a href="views">视图</a>
                        </li>
                        <li><a href="blade">Blade 模板</a>
                        </li>
                    </ul>
                </li>
                <li>系统架构
                    <ul>
                        <li><a href="lifecycle">请求的生命周期</a>
                        </li>
                        <li><a href="structure">应用程序结构</a>
                        </li>
                        <li><a href="providers">服务提供者</a>
                        </li>
                        <li><a href="container">服务容器</a>
                        </li>
                        <li><a href="contracts">Contract</a>
                        </li>
                        <li><a href="facades">Facade</a>
                        </li>
                    </ul>
                </li>
                <li>系统服务
                    <ul>
                        <li><a href="authentication">认证</a>
                        </li>
                        <li><a href="authorization">授权</a>
                        </li>
                        <li><a href="artisan">Artisan 控制台</a>
                        </li>
                        <li><a href="billing">计费</a>
                        </li>
                        <li><a href="cache">缓存</a>
                        </li>
                        <li><a href="collections">集合</a>
                        </li>
                        <li><a href="elixir">Elixir</a>
                        </li>
                        <li><a href="encryption">加密</a>
                        </li>
                        <li><a href="errors">错误与日志</a>
                        </li>
                        <li><a href="events">事件</a>
                        </li>
                        <li><a href="filesystem">文件系统 / 云存储</a>
                        </li>
                        <li><a href="hashing">哈希</a>
                        </li>
                        <li><a href="helpers">辅助方法</a>
                        </li>
                        <li><a href="localization">本地化</a>
                        </li>
                        <li><a href="mail">邮件</a>
                        </li>
                        <li><a href="packages">扩展包开发</a>
                        </li>
                        <li><a href="pagination">分页</a>
                        </li>
                        <li><a href="queues">队列</a>
                        </li>
                        <li><a href="redis">Redis</a>
                        </li>
                        <li><a href="session">会话</a>
                        </li>
                        <li><a href="envoy">SSH 任务</a>
                        </li>
                        <li><a href="scheduling">任务调度</a>
                        </li>
                        <li><a href="testing">测试</a>
                        </li>
                        <li><a href="validation">验证</a>
                        </li>
                    </ul>
                </li>
                <li>数据库
                    <ul>
                        <li><a href="database">入门</a>
                        </li>
                        <li><a href="queries">查询构造器</a>
                        </li>
                        <li><a href="migrations">迁移</a>
                        </li>
                        <li><a href="seeding">数据填充</a>
                        </li>
                    </ul>
                </li>
                <li>Eloquent ORM
                    <ul>
                        <li><a href="eloquent">入门</a>
                        </li>
                        <li><a href="eloquent-relationships">关系</a>
                        </li>
                        <li><a href="eloquent-collections">集合</a>
                        </li>
                        <li><a href="eloquent-mutators">调整修改</a>
                        </li>
                        <li><a href="eloquent-serialization">序列化</a>
                        </li>
                    </ul>
                </li>
            </ul>

        </div>

    </nav>

    <div class="docs-wrapper container">

        <section class="sidebar">
            <ul>
                <li>序言
                    <ul>
                        <li><a href="releases">版本说明</a>
                        </li>
                        <li><a href="upgrade">升级指南</a>
                        </li>
                        <li><a href="contributions">贡献指南</a>
                        </li>
                        <li><a href="http://www.golaravel.com/laravel/api/5.1">API 文档</a>
                        </li>
                    </ul>
                </li>
                <li>安装设置
                    <ul>
                        <li><a href="installation">安装</a>
                        </li>
                        <li><a href="homestead">Homestead</a>
                        </li>
                    </ul>
                </li>
                <li>教程
                    <ul>
                        <li><a href="quickstart">入门学习任务</a>
                        </li>
                        <li><a href="quickstart-intermediate">中级学习任务</a>
                        </li>
                    </ul>
                </li>
                <li>基础知识
                    <ul>
                        <li><a href="routing">路由</a>
                        </li>
                        <li><a href="middleware">中间件</a>
                        </li>
                        <li><a href="controllers">控制器</a>
                        </li>
                        <li><a href="requests">请求</a>
                        </li>
                        <li><a href="responses">响应</a>
                        </li>
                        <li><a href="views">视图</a>
                        </li>
                        <li><a href="blade">Blade 模板</a>
                        </li>
                    </ul>
                </li>
                <li>系统架构
                    <ul>
                        <li><a href="lifecycle">请求的生命周期</a>
                        </li>
                        <li><a href="structure">应用程序结构</a>
                        </li>
                        <li><a href="providers">服务提供者</a>
                        </li>
                        <li><a href="container">服务容器</a>
                        </li>
                        <li><a href="contracts">Contract</a>
                        </li>
                        <li><a href="facades">Facade</a>
                        </li>
                    </ul>
                </li>
                <li>系统服务
                    <ul>
                        <li><a href="authentication">认证</a>
                        </li>
                        <li><a href="authorization">授权</a>
                        </li>
                        <li><a href="artisan">Artisan 控制台</a>
                        </li>
                        <li><a href="billing">计费</a>
                        </li>
                        <li><a href="cache">缓存</a>
                        </li>
                        <li><a href="collections">集合</a>
                        </li>
                        <li><a href="elixir">Elixir</a>
                        </li>
                        <li><a href="encryption">加密</a>
                        </li>
                        <li><a href="errors">错误与日志</a>
                        </li>
                        <li><a href="events">事件</a>
                        </li>
                        <li><a href="filesystem">文件系统 / 云存储</a>
                        </li>
                        <li><a href="hashing">哈希</a>
                        </li>
                        <li><a href="helpers">辅助方法</a>
                        </li>
                        <li><a href="localization">本地化</a>
                        </li>
                        <li><a href="mail">邮件</a>
                        </li>
                        <li><a href="packages">扩展包开发</a>
                        </li>
                        <li><a href="pagination">分页</a>
                        </li>
                        <li><a href="queues">队列</a>
                        </li>
                        <li><a href="redis">Redis</a>
                        </li>
                        <li><a href="session">会话</a>
                        </li>
                        <li><a href="envoy">SSH 任务</a>
                        </li>
                        <li><a href="scheduling">任务调度</a>
                        </li>
                        <li><a href="testing">测试</a>
                        </li>
                        <li><a href="validation">验证</a>
                        </li>
                    </ul>
                </li>
                <li>数据库
                    <ul>
                        <li><a href="database">入门</a>
                        </li>
                        <li><a href="queries">查询构造器</a>
                        </li>
                        <li><a href="migrations">迁移</a>
                        </li>
                        <li><a href="seeding">数据填充</a>
                        </li>
                    </ul>
                </li>
                <li>Eloquent ORM
                    <ul>
                        <li><a href="eloquent">入门</a>
                        </li>
                        <li><a href="eloquent-relationships">关系</a>
                        </li>
                        <li><a href="eloquent-collections">集合</a>
                        </li>
                        <li><a href="eloquent-mutators">调整修改</a>
                        </li>
                        <li><a href="eloquent-serialization">序列化</a>
                        </li>
                    </ul>
                </li>
            </ul>

        </section>

        <article>
            <h1>Testing</h1>
            <ul>
                <li><a href="testing#introduction">Introduction</a>
                </li>
                <li><a href="testing#application-testing">Application Testing</a>
                    <ul>
                        <li><a href="testing#interacting-with-your-application">Interacting With Your Application</a>
                        </li>
                        <li><a href="testing#testing-json-apis">Testing JSON APIs</a>
                        </li>
                        <li><a href="testing#sessions-and-authentication">Sessions / Authentication</a>
                        </li>
                        <li><a href="testing#disabling-middleware">Disabling Middleware</a>
                        </li>
                        <li><a href="testing#custom-http-requests">Custom HTTP Requests</a>
                        </li>
                        <li><a href="testing#phpunit-assertions">PHPUnit Assertions</a>
                        </li>
                    </ul>
                </li>
                <li><a href="testing#working-with-databases">Working With Databases</a>
                    <ul>
                        <li><a href="testing#resetting-the-database-after-each-test">Resetting The Database After Each Test</a>
                        </li>
                        <li><a href="testing#model-factories">Model Factories</a>
                        </li>
                    </ul>
                </li>
                <li><a href="testing#mocking">Mocking</a>
                    <ul>
                        <li><a href="testing#mocking-events">Mocking Events</a>
                        </li>
                        <li><a href="testing#mocking-jobs">Mocking Jobs</a>
                        </li>
                        <li><a href="testing#mocking-facades">Mocking Facades</a>
                        </li>
                    </ul>
                </li>
            </ul>
            <p>
                <a name="introduction"></a>
            </p>
            <h2>Introduction</h2>
            <p>Laravel is built with testing in mind. In fact, support for testing with PHPUnit is included out of the box, and a <code>phpunit.xml</code> file is already setup for your application. The framework also ships with convenient helper methods
                allowing you to expressively test your applications.</p>
            <p>An <code>ExampleTest.php</code> file is provided in the <code>tests</code> directory. After installing a new Laravel application, simply run <code>phpunit</code> on the command line to run your tests.</p>
            <h3>Test Environment</h3>
            <p>When running tests, Laravel will automatically set the configuration environment to <code>testing</code>. Laravel automatically configures the session and cache to the <code>array</code> driver while testing, meaning no session or cache data
                will be persisted while testing.</p>
            <p>You are free to create other testing environment configurations as necessary. The <code>testing</code> environment variables may be configured in the <code>phpunit.xml</code> file.</p>
            <h3>Defining &amp; Running Tests</h3>
            <p>To create a new test case, use the <code>make:test</code> Artisan command:</p>
            <pre><code>php artisan make:test UserTest
</code></pre>
            <p>This command will place a new <code>UserTest</code> class within your <code>tests</code> directory. You may then define test methods as you normally would using PHPUnit. To run your tests, simply execute the <code>phpunit</code> command from
                your terminal:</p>
            <pre><code>&lt;?php

use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;

class UserTest extends TestCase
{
    /**
     * A basic test example.
     *
     * @return void
     */
    public function testExample()
    {
        $this-&gt;assertTrue(true);
    }
}
</code></pre>
            <blockquote>
                <p><strong>Note:</strong> If you define your own <code>setUp</code> method within a test class, be sure to call <code>parent::setUp</code>.</p>
            </blockquote>
            <p>
                <a name="application-testing"></a>
            </p>
            <h2>Application Testing</h2>
            <p>Laravel provides a very fluent API for making HTTP requests to your application, examining the output, and even filling out forms. For example, take a look at the <code>ExampleTest.php</code> file included in your <code>tests</code> directory:</p>
            <pre><code>&lt;?php

use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseTransactions;

class ExampleTest extends TestCase
{
    /**
     * A basic functional test example.
     *
     * @return void
     */
    public function testBasicExample()
    {
        $this-&gt;visit('/')
             -&gt;see('Laravel 5')
             -&gt;dontSee('Rails');
    }
}
</code></pre>
            <p>The <code>visit</code> method makes a <code>GET</code> request into the application. The <code>see</code> method asserts that we should see the given text in the response returned by the application. The <code>dontSee</code> method asserts
                that the given text is not returned in the application response. This is the most basic application test available in Laravel.</p>
            <p>
                <a name="interacting-with-your-application"></a>
            </p>
            <h3>Interacting With Your Application</h3>
            <p>Of course, you can do much more than simply assert that text appears in a given response. Let's take a look at some examples of clicking links and filling out forms:</p>
            <h4>Clicking Links</h4>
            <p>In this test, we will make a request to the application, &quot;click&quot; a link in the returned response, and then assert that we landed on a given URI. For example, let's assume there is a link in our response that has a text value of &quot;About
                Us&quot;:</p>
            <pre><code>&lt;a href=&quot;/about-us&quot;&gt;About Us&lt;/a&gt;
</code></pre>
            <p>Now, let's write a test that clicks the link and asserts the user lands on the correct page:</p>
            <pre><code>public function testBasicExample()
{
    $this-&gt;visit('/')
         -&gt;click('About Us')
         -&gt;seePageIs('/about-us');
}
</code></pre>
            <h4>Working With Forms</h4>
            <p>Laravel also provides several methods for testing forms. The <code>type</code>, <code>select</code>, <code>check</code>, <code>attach</code>, and <code>press</code> methods allow you to interact with all of your form's inputs. For example,
                let's imagine this form exists on the application's registration page:</p>
            <pre><code>&lt;form action=&quot;/register&quot; method=&quot;POST&quot;&gt;
    {!! csrf_field() !!}

    &lt;div&gt;
        Name: &lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;
    &lt;/div&gt;

    &lt;div&gt;
        &lt;input type=&quot;checkbox&quot; value=&quot;yes&quot; name=&quot;terms&quot;&gt; Accept Terms
    &lt;/div&gt;

    &lt;div&gt;
        &lt;input type=&quot;submit&quot; value=&quot;Register&quot;&gt;
    &lt;/div&gt;
&lt;/form&gt;
</code></pre>
            <p>We can write a test to complete this form and inspect the result:</p>
            <pre><code>public function testNewUserRegistration()
{
    $this-&gt;visit('/register')
         -&gt;type('Taylor', 'name')
         -&gt;check('terms')
         -&gt;press('Register')
         -&gt;seePageIs('/dashboard');
}
</code></pre>
            <p>Of course, if your form contains other inputs such as radio buttons or drop-down boxes, you may easily fill out those types of fields as well. Here is a list of each form manipulation method:</p>
            <table>
                <thead>
                    <tr>
                        <th>Method</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td><code>$this-&gt;type($text, $elementName)</code>
                        </td>
                        <td>&quot;Type&quot; text into a given field.</td>
                    </tr>
                    <tr>
                        <td><code>$this-&gt;select($value, $elementName)</code>
                        </td>
                        <td>&quot;Select&quot; a radio button or drop-down field.</td>
                    </tr>
                    <tr>
                        <td><code>$this-&gt;check($elementName)</code>
                        </td>
                        <td>&quot;Check&quot; a checkbox field.</td>
                    </tr>
                    <tr>
                        <td><code>$this-&gt;attach($pathToFile, $elementName)</code>
                        </td>
                        <td>&quot;Attach&quot; a file to the form.</td>
                    </tr>
                    <tr>
                        <td><code>$this-&gt;press($buttonTextOrElementName)</code>
                        </td>
                        <td>&quot;Press&quot; a button with the given text or name.</td>
                    </tr>
                </tbody>
            </table>
            <h4>Working With Attachments</h4>
            <p>If your form contains <code>file</code> input types, you may attach files to the form using the <code>attach</code> method:</p>
            <pre><code>public function testPhotoCanBeUploaded()
{
    $this-&gt;visit('/upload')
         -&gt;name('File Name', 'name')
         -&gt;attach($absolutePathToFile, 'photo')
         -&gt;press('Upload')
         -&gt;see('Upload Successful!');
}
</code></pre>
            <p>
                <a name="testing-json-apis"></a>
            </p>
            <h3>Testing JSON APIs</h3>
            <p>Laravel also provides several helpers for testing JSON APIs and their responses. For example, the <code>get</code>, <code>post</code>, <code>put</code>, <code>patch</code>, and <code>delete</code> methods may be used to issue requests with
                various HTTP verbs. You may also easily pass data and headers to these methods. To get started, let's write a test to make a <code>POST</code> request to <code>/user</code> and assert that a given array was returned in JSON format:</p>
            <pre><code>&lt;?php

class ExampleTest extends TestCase
{
    /**
     * A basic functional test example.
     *
     * @return void
     */
    public function testBasicExample()
    {
        $this-&gt;post('/user', ['name' =&gt; 'Sally'])
             -&gt;seeJson([
                 'created' =&gt; true,
             ]);
    }
}
</code></pre>
            <p>The <code>seeJson</code> method converts the given array into JSON, and then verifies that the JSON fragment occurs <strong>anywhere</strong> within the entire JSON response returned by the application. So, if there are other properties in
                the JSON response, this test will still pass as long as the given fragment is present.</p>
            <h4>Verify Exact JSON Match</h4>
            <p>If you would like to verify that the given array is an <strong>exact</strong> match for the JSON returned by the application, you should use the <code>seeJsonEquals</code> method:</p>
            <pre><code>&lt;?php

class ExampleTest extends TestCase
{
    /**
     * A basic functional test example.
     *
     * @return void
     */
    public function testBasicExample()
    {
        $this-&gt;post('/user', ['name' =&gt; 'Sally'])
             -&gt;seeJsonEquals([
                 'created' =&gt; true,
             ]);
    }
}
</code></pre>
            <p>
                <a name="sessions-and-authentication"></a>
            </p>
            <h3>Sessions / Authentication</h3>
            <p>Laravel provides several helpers for working with the session during testing. First, you may set the session data to a given array using the <code>withSession</code> method. This is useful for loading the session with data before testing a
                request to your application:</p>
            <pre><code>&lt;?php

class ExampleTest extends TestCase
{
    public function testApplication()
    {
        $this-&gt;withSession(['foo' =&gt; 'bar'])
             -&gt;visit('/');
    }
}
</code></pre>
            <p>Of course, one common use of the session is for maintaining user state, such as the authenticated user. The <code>actingAs</code> helper method provides a simple way to authenticate a given user as the current user. For example, we may use
                a <a href="testing#model-factories">model factory</a> to generate and authenticate a user:</p>
            <pre><code>&lt;?php

class ExampleTest extends TestCase
{
    public function testApplication()
    {
        $user = factory(App\User::class)-&gt;create();

        $this-&gt;actingAs($user)
             -&gt;withSession(['foo' =&gt; 'bar'])
             -&gt;visit('/')
             -&gt;see('Hello, '.$user-&gt;name);
    }
}
</code></pre>
            <p>
                <a name="disabling-middleware"></a>
            </p>
            <h3>Disabling Middleware</h3>
            <p>When testing your application, you may find it convenient to disable <a href="middleware">middleware</a> for some of your tests. This will allow you to test your routes and controller in isolation from any middleware concerns. Laravel
                includes a simple <code>WithoutMiddleware</code> trait that you can use to automatically disable all middleware for the test class:</p>
            <pre><code>&lt;?php

use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseTransactions;

class ExampleTest extends TestCase
{
    use WithoutMiddleware;

    //
}
</code></pre>
            <p>If you would like to only disable middleware for a few test methods, you may call the <code>withoutMiddleware</code> method from within the test methods:</p>
            <pre><code>&lt;?php

class ExampleTest extends TestCase
{
    /**
     * A basic functional test example.
     *
     * @return void
     */
    public function testBasicExample()
    {
        $this-&gt;withoutMiddleware();

        $this-&gt;visit('/')
             -&gt;see('Laravel 5');
    }
}
</code></pre>
            <p>
                <a name="custom-http-requests"></a>
            </p>
            <h3>Custom HTTP Requests</h3>
            <p>If you would like to make a custom HTTP request into your application and get the full <code>Illuminate\Http\Response</code> object, you may use the <code>call</code> method:</p>
            <pre><code>public function testApplication()
{
    $response = $this-&gt;call('GET', '/');

    $this-&gt;assertEquals(200, $response-&gt;status());
}
</code></pre>
            <p>If you are making <code>POST</code>, <code>PUT</code>, or <code>PATCH</code> requests you may pass an array of input data with the request. Of course, this data will be available in your routes and controller via the <a href="requests">Request instance</a>:</p>
            <pre><code>   $response = $this-&gt;call('POST', '/user', ['name' =&gt; 'Taylor']);
</code></pre>
            <p>
                <a name="phpunit-assertions"></a>
            </p>
            <h3>PHPUnit Assertions</h3>
            <p>Laravel provides several additional assertion methods for <a href="https://phpunit.de/" target="_blank">PHPUnit</a> tests:</p>
            <table>
                <thead>
                    <tr>
                        <th>Method</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td><code>-&gt;assertResponseOk();</code>
                        </td>
                        <td>Assert that the client response has an OK status code.</td>
                    </tr>
                    <tr>
                        <td><code>-&gt;assertResponseStatus($code);</code>
                        </td>
                        <td>Assert that the client response has a given code.</td>
                    </tr>
                    <tr>
                        <td><code>-&gt;assertViewHas($key, $value = null);</code>
                        </td>
                        <td>Assert that the response view has a given piece of bound data.</td>
                    </tr>
                    <tr>
                        <td><code>-&gt;assertViewHasAll(array $bindings);</code>
                        </td>
                        <td>Assert that the view has a given list of bound data.</td>
                    </tr>
                    <tr>
                        <td><code>-&gt;assertViewMissing($key);</code>
                        </td>
                        <td>Assert that the response view is missing a piece of bound data.</td>
                    </tr>
                    <tr>
                        <td><code>-&gt;assertRedirectedTo($uri, $with = []);</code>
                        </td>
                        <td>Assert whether the client was redirected to a given URI.</td>
                    </tr>
                    <tr>
                        <td><code>-&gt;assertRedirectedToRoute($name, $parameters = [], $with = []);</code>
                        </td>
                        <td>Assert whether the client was redirected to a given route.</td>
                    </tr>
                    <tr>
                        <td><code>-&gt;assertRedirectedToAction($name, $parameters = [], $with = []);</code>
                        </td>
                        <td>Assert whether the client was redirected to a given action.</td>
                    </tr>
                    <tr>
                        <td><code>-&gt;assertSessionHas($key, $value = null);</code>
                        </td>
                        <td>Assert that the session has a given value.</td>
                    </tr>
                    <tr>
                        <td><code>-&gt;assertSessionHasAll(array $bindings);</code>
                        </td>
                        <td>Assert that the session has a given list of values.</td>
                    </tr>
                    <tr>
                        <td><code>-&gt;assertSessionHasErrors($bindings = [], $format = null);</code>
                        </td>
                        <td>Assert that the session has errors bound.</td>
                    </tr>
                    <tr>
                        <td><code>-&gt;assertHasOldInput();</code>
                        </td>
                        <td>Assert that the session has old input.</td>
                    </tr>
                </tbody>
            </table>
            <p>
                <a name="working-with-databases"></a>
            </p>
            <h2>Working With Databases</h2>
            <p>Laravel also provides a variety of helpful tools to make it easier to test your database driven applications. First, you may use the <code>seeInDatabase</code> helper to assert that data exists in the database matching a given set of criteria.
                For example, if we would like to verify that there is a record in the <code>users</code> table with the <code>email</code> value of <code>sally@example.com</code>, we can do the following:</p>
            <pre><code>public function testDatabase()
{
    // Make call to application...

    $this-&gt;seeInDatabase('users', ['email' =&gt; 'sally@foo.com']);
}
</code></pre>
            <p>Of course, the <code>seeInDatabase</code> method and other helpers like it are for convenience. You are free to use any of PHPUnit's built-in assertion methods to supplement your tests.</p>
            <p>
                <a name="resetting-the-database-after-each-test"></a>
            </p>
            <h3>Resetting The Database After Each Test</h3>
            <p>It is often useful to reset your database after each test so that data from a previous test does not interfere with subsequent tests.</p>
            <h4>Using Migrations</h4>
            <p>One option is to rollback the database after each test and migrate it before the next test. Laravel provides a simple <code>DatabaseMigrations</code> trait that will automatically handle this for you. Simply use the trait on your test class:</p>
            <pre><code>&lt;?php

use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;

class ExampleTest extends TestCase
{
    use DatabaseMigrations;

    /**
     * A basic functional test example.
     *
     * @return void
     */
    public function testBasicExample()
    {
        $this-&gt;visit('/')
             -&gt;see('Laravel 5');
    }
}
</code></pre>
            <h4>Using Transactions</h4>
            <p>Another option is to wrap every test case in a database transaction. Again, Laravel provides a convenient <code>DatabaseTransactions</code> trait that will automatically handle this:</p>
            <pre><code>&lt;?php

use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;

class ExampleTest extends TestCase
{
    use DatabaseTransactions;

    /**
     * A basic functional test example.
     *
     * @return void
     */
    public function testBasicExample()
    {
        $this-&gt;visit('/')
             -&gt;see('Laravel 5');
    }
}
</code></pre>
            <blockquote>
                <p><strong>Note:</strong> This trait will only wrap the default database connection in a transaction.</p>
            </blockquote>
            <p>
                <a name="model-factories"></a>
            </p>
            <h3>Model Factories</h3>
            <p>When testing, it is common to need to insert a few records into your database before executing your test. Instead of manually specifying the value of each column when you create this test data, Laravel allows you to define a default set of
                attributes for each of your <a href="eloquent">Eloquent models</a> using &quot;factories&quot;. To get started, take a look at the <code>database/factories/ModelFactory.php</code> file in your application. Out of the box, this
                file contains one factory definition:</p>
            <pre><code>$factory-&gt;define(App\User::class, function (Faker\Generator $faker) {
    return [
        'name' =&gt; $faker-&gt;name,
        'email' =&gt; $faker-&gt;email,
        'password' =&gt; bcrypt(str_random(10)),
        'remember_token' =&gt; str_random(10),
    ];
});
</code></pre>
            <p>Within the Closure, which serves as the factory definition, you may return the default test values of all attributes on the model. The Closure will receive an instance of the <a href="https://github.com/fzaninotto/Faker" target="_blank">Faker</a> PHP library,
                which allows you to conveniently generate various kinds of random data for testing.</p>
            <p>Of course, you are free to add your own additional factories to the <code>ModelFactory.php</code> file.</p>
            <h4>Multiple Factory Types</h4>
            <p>Sometimes you may wish to have multiple factories for the same Eloquent model class. For example, perhaps you would like to have a factory for &quot;Administrator&quot; users in addition to normal users. You may define these factories using
                the <code>defineAs</code> method:</p>
            <pre><code>$factory-&gt;defineAs(App\User::class, 'admin', function ($faker) {
    return [
        'name' =&gt; $faker-&gt;name,
        'email' =&gt; $faker-&gt;email,
        'password' =&gt; str_random(10),
        'remember_token' =&gt; str_random(10),
        'admin' =&gt; true,
    ];
});
</code></pre>
            <p>Instead of duplicating all of the attributes from your base user factory, you may use the <code>raw</code> method to retrieve the base attributes. Once you have the attributes, simply supplement them with any additional values you require:</p>
            <pre><code>$factory-&gt;defineAs(App\User::class, 'admin', function ($faker) use ($factory) {
    $user = $factory-&gt;raw(App\User::class);

    return array_merge($user, ['admin' =&gt; true]);
});
</code></pre>
            <h4>Using Factories In Tests</h4>
            <p>Once you have defined your factories, you may use them in your tests or database seed files to generate model instances using the global <code>factory</code> function. So, let's take a look at a few examples of creating models. First, we'll
                use the <code>make</code> method, which creates models but does not save them to the database:</p>
            <pre><code>public function testDatabase()
{
    $user = factory(App\User::class)-&gt;make();

    // Use model in tests...
}
</code></pre>
            <p>If you would like to override some of the default values of your models, you may pass an array of values to the <code>make</code> method. Only the specified values will be replaced while the rest of the values remain set to their default values
                as specified by the factory:</p>
            <pre><code>$user = factory(App\User::class)-&gt;make([
    'name' =&gt; 'Abigail',
   ]);
</code></pre>
            <p>You may also create a Collection of many models or create models of a given type:</p>
            <pre><code>// Create three App\User instances...
$users = factory(App\User::class, 3)-&gt;make();

// Create an App\User &quot;admin&quot; instance...
$user = factory(App\User::class, 'admin')-&gt;make();

// Create three App\User &quot;admin&quot; instances...
$users = factory(App\User::class, 'admin', 3)-&gt;make();
</code></pre>
            <h4>Persisting Factory Models</h4>
            <p>The <code>create</code> method not only creates the model instances, but also saves them to the database using Eloquent's <code>save</code> method:</p>
            <pre><code>public function testDatabase()
{
    $user = factory(App\User::class)-&gt;create();

    // Use model in tests...
}
</code></pre>
            <p>Again, you may override attributes on the model by passing an array to the <code>create</code> method:</p>
            <pre><code>$user = factory(App\User::class)-&gt;create([
    'name' =&gt; 'Abigail',
   ]);
</code></pre>
            <h4>Adding Relations To Models</h4>
            <p>You may even persist multiple models to the database. In this example, we'll even attach a relation to the created models. When using the <code>create</code> method to create multiple models, an Eloquent <a href="eloquent-collections">collection instance</a>                is returned, allowing you to use any of the convenient functions provided by the collection, such as <code>each</code>:</p>
            <pre><code>$users = factory(App\User::class, 3)
           -&gt;create()
           -&gt;each(function($u) {
                $u-&gt;posts()-&gt;save(factory(App\Post::class)-&gt;make());
            });
</code></pre>
            <p>
                <a name="mocking"></a>
            </p>
            <h2>Mocking</h2>
            <p>
                <a name="mocking-events"></a>
            </p>
            <h3>Mocking Events</h3>
            <p>If you are making heavy use of Laravel's event system, you may wish to silence or mock certain events while testing. For example, if you are testing user registration, you probably do not want all of a <code>UserRegistered</code> event's handlers
                firing, since these may send &quot;welcome&quot; e-mails, etc.</p>
            <p>Laravel provides a convenient <code>expectsEvents</code> method that verifies the expected events are fired, but prevents any handlers for those events from running:</p>
            <pre><code>&lt;?php

class ExampleTest extends TestCase
{
    public function testUserRegistration()
    {
        $this-&gt;expectsEvents(App\Events\UserRegistered::class);

        // Test user registration code...
    }
}
</code></pre>
            <p>If you would like to prevent all event handlers from running, you may use the <code>withoutEvents</code> method:</p>
            <pre><code>&lt;?php

class ExampleTest extends TestCase
{
    public function testUserRegistration()
    {
        $this-&gt;withoutEvents();

        // Test user registration code...
    }
}
</code></pre>
            <p>
                <a name="mocking-jobs"></a>
            </p>
            <h3>Mocking Jobs</h3>
            <p>Sometimes, you may wish to simply test that specific jobs are dispatched by your controllers when making requests to your application. This allows you to test your routes / controllers in isolation - set apart from your job's logic. Of course,
                you can then test the job itself in a separate test class.</p>
            <p>Laravel provides a convenient <code>expectsJobs</code> method that will verify that the expected jobs are dispatched, but the job itself will not be executed:</p>
            <pre><code>&lt;?php

class ExampleTest extends TestCase
{
    public function testPurchasePodcast()
    {
        $this-&gt;expectsJobs(App\Jobs\PurchasePodcast::class);

        // Test purchase podcast code...
    }
}
</code></pre>
            <blockquote>
                <p><strong>Note:</strong> This method only detects jobs that are dispatched via the <code>DispatchesJobs</code> trait's dispatch methods. It does not detect jobs that are sent directly to <code>Queue::push</code>.</p>
            </blockquote>
            <p>
                <a name="mocking-facades"></a>
            </p>
            <h3>Mocking Facades</h3>
            <p>When testing, you may often want to mock a call to a Laravel <a href="facades">facade</a>. For example, consider the following controller action:</p>
            <pre><code>&lt;?php

namespace App\Http\Controllers;

use Cache;
use Illuminate\Routing\Controller;

class UserController extends Controller
{
    /**
     * Show a list of all users of the application.
     *
     * @return Response
     */
    public function index()
    {
        $value = Cache::get('key');

        //
    }
}
</code></pre>
            <p>We can mock the call to the <code>Cache</code> facade by using the <code>shouldReceive</code> method, which will return an instance of a <a href="https://github.com/padraic/mockery" target="_blank">Mockery</a> mock. Since facades are actually resolved and
                managed by the Laravel <a href="container">service container</a>, they have much more testability than a typical static class. For example, let's mock our call to the <code>Cache</code> facade:</p>
            <pre><code>&lt;?php

class FooTest extends TestCase
{
    public function testGetIndex()
    {
        Cache::shouldReceive('get')
                    -&gt;once()
                    -&gt;with('key')
                    -&gt;andReturn('value');

        $this-&gt;visit('/users')-&gt;see('value');
    }
}
</code></pre>
            <blockquote>
                <p><strong>Note:</strong> You should not mock the <code>Request</code> facade. Instead, pass the input you desire into the HTTP helper methods such as <code>call</code> and <code>post</code> when running your test.</p>
            </blockquote>

        </article>
    </div>


    <footer class="main">
        <ul>
            <li class="nav-docs"><a href="http://www.golaravel.com/laravel/docs/">中文文档</a>
            </li>
            <li class="nav-community"><a href="http://wenda.golaravel.com" target="_blank">问答社区</a>
            </li>
            <li class="nav-api"><a href="http://laravel.com/api/5.0/" target="_blank">API</a>
            </li>
            <li class="nav-laracasts"><a href="https://laracasts.com" target="_blank">视频教程（国外）</a>
            </li>
            <li class="nav-forge"><a href="https://forge.laravel.com" target="_blank">Forge</a>
            </li>

        </ul>
        <p>Laravel is a trademark of Taylor Otwell. Copyright &copy; Taylor Otwell.</p>
        <p class="less-significant"><a href="http://jackmcdade.com" target="_blank">Design by Jack McDade</a>
        </p>
    </footer>

    <script src="../../assets/js/laravel.js"></script>
    <script src="../../assets/js/viewport-units-buggyfill.js"></script>
    <script>
        window.viewportUnitsBuggyfill.init();
    </script>
    <script type="text/javascript">
        var _bdhmProtocol = (("https:" == document.location.protocol) ? " https://" : " http://");
        document.write(unescape("%3Cscript src='" + _bdhmProtocol + "hm.baidu.com/h.js%3Fc8d13872a523d9c286aa7affbe0921f1' type='text/javascript'%3E%3C/script%3E"));
    </script>
</body>

</html>