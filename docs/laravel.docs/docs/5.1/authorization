<!doctype html>
<html lang="zh-CN">

<head>
    <meta charset="utf-8">
    <title>Authorization - Laravel 5.1 中文文档 | Laravel 中文网</title>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta name="author" content="Laravel 中文网">
    <meta name="description" content="Laravel - 为 WEB 艺术家创造的 PHP 框架。| Laravel 中文网">
    <meta name="keywords" content="Laravel中文社区,php框架,laravel中文网,php framework,restful routing,laravel,laravel php">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!--[if lte IE 9]>
		<script src="http://cdn.bootcss.com/html5shiv/3.7.2/html5shiv.min.js"></script>
	<![endif]-->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="../../assets/css/laravel.css">
    <link rel="stylesheet" href="../../assets/css/patch.css">
</head>

<body class="docs language-php">

    <span class="overlay"></span>

    <nav class="main">
        <div class="container">
            <a href="http://www.golaravel.com/laravel/" class="brand">
                <img src="../../assets/img/laravel-logo.png" height="30"> Laravel
            </a>

            <div class="responsive-sidebar-nav">
                <a href="authorization#" class="toggle-slide menu-link btn">&#9776;</a>
            </div>

            <div class="switcher">
                <div class="dropdown">
                    <button class="btn dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-expanded="true">
                        <!--<span class="faint">v</span> -->
                        5.1
                        <span class="caret"></span>
                    </button>
                    <ul class="dropdown-menu" role="menu" aria-labelledby="dropdownMenu1">
                        <li role="presentation">
                            <a role="menuitem" tabindex="-1" href="index.html">5.1</a>
                        </li>
                        <li role="presentation">
                            <a role="menuitem" tabindex="-1" href="http://www.golaravel.com/laravel/docs/5.0">5.0</a>
                        </li>
                        <li role="presentation">
                            <a role="menuitem" tabindex="-1" href="http://www.golaravel.com/laravel/docs/4.2">4.2</a>
                        </li>
                        <li role="presentation">
                            <a role="menuitem" tabindex="-1" href="http://www.golaravel.com/laravel/docs/4.1">4.1</a>
                        </li>
                        <li role="presentation">
                            <a role="menuitem" tabindex="-1" href="http://www.golaravel.com/laravel/docs/4.0">4.0</a>
                        </li>
                    </ul>
                </div>
            </div>

            <ul class="main-nav">
                <li class="nav-docs"><a href="http://www.golaravel.com/laravel/docs/">中文文档</a>
                </li>
                <li class="nav-community"><a href="http://wenda.golaravel.com" target="_blank">问答社区</a>
                </li>
                <li class="nav-api"><a href="http://laravel.com/api/5.0/" target="_blank">API</a>
                </li>
                <li class="nav-laracasts"><a href="https://laracasts.com" target="_blank">视频教程（国外）</a>
                </li>
                <li class="nav-forge"><a href="https://forge.laravel.com" target="_blank">Forge</a>
                </li>

            </ul>
        </div>
    </nav>

    <nav id="slide-menu" class="slide-menu" role="navigation">

        <div class="brand">
            <a href="http://www.golaravel.com/laravel/">
                <img src="../../assets/img/laravel-logo-white.png" height="50">
            </a>
        </div>

        <ul class="slide-main-nav">
            <li><a href="http://www.golaravel.com/laravel/">首页</a>
            </li>
            <li class="nav-docs"><a href="http://www.golaravel.com/laravel/docs/">中文文档</a>
            </li>
            <li class="nav-community"><a href="http://wenda.golaravel.com" target="_blank">问答社区</a>
            </li>
            <li class="nav-api"><a href="http://laravel.com/api/5.0/" target="_blank">API</a>
            </li>
            <li class="nav-laracasts"><a href="https://laracasts.com" target="_blank">视频教程（国外）</a>
            </li>
            <li class="nav-forge"><a href="https://forge.laravel.com" target="_blank">Forge</a>
            </li>

        </ul>

        <div class="slide-docs-nav">
            <h2>文档目录</h2>
            <ul>
                <li>序言
                    <ul>
                        <li><a href="releases">版本说明</a>
                        </li>
                        <li><a href="upgrade">升级指南</a>
                        </li>
                        <li><a href="contributions">贡献指南</a>
                        </li>
                        <li><a href="http://www.golaravel.com/laravel/api/5.1">API 文档</a>
                        </li>
                    </ul>
                </li>
                <li>安装设置
                    <ul>
                        <li><a href="installation">安装</a>
                        </li>
                        <li><a href="homestead">Homestead</a>
                        </li>
                    </ul>
                </li>
                <li>教程
                    <ul>
                        <li><a href="quickstart">入门学习任务</a>
                        </li>
                        <li><a href="quickstart-intermediate">中级学习任务</a>
                        </li>
                    </ul>
                </li>
                <li>基础知识
                    <ul>
                        <li><a href="routing">路由</a>
                        </li>
                        <li><a href="middleware">中间件</a>
                        </li>
                        <li><a href="controllers">控制器</a>
                        </li>
                        <li><a href="requests">请求</a>
                        </li>
                        <li><a href="responses">响应</a>
                        </li>
                        <li><a href="views">视图</a>
                        </li>
                        <li><a href="blade">Blade 模板</a>
                        </li>
                    </ul>
                </li>
                <li>系统架构
                    <ul>
                        <li><a href="lifecycle">请求的生命周期</a>
                        </li>
                        <li><a href="structure">应用程序结构</a>
                        </li>
                        <li><a href="providers">服务提供者</a>
                        </li>
                        <li><a href="container">服务容器</a>
                        </li>
                        <li><a href="contracts">Contract</a>
                        </li>
                        <li><a href="facades">Facade</a>
                        </li>
                    </ul>
                </li>
                <li>系统服务
                    <ul>
                        <li><a href="authentication">认证</a>
                        </li>
                        <li><a href="authorization">授权</a>
                        </li>
                        <li><a href="artisan">Artisan 控制台</a>
                        </li>
                        <li><a href="billing">计费</a>
                        </li>
                        <li><a href="cache">缓存</a>
                        </li>
                        <li><a href="collections">集合</a>
                        </li>
                        <li><a href="elixir">Elixir</a>
                        </li>
                        <li><a href="encryption">加密</a>
                        </li>
                        <li><a href="errors">错误与日志</a>
                        </li>
                        <li><a href="events">事件</a>
                        </li>
                        <li><a href="filesystem">文件系统 / 云存储</a>
                        </li>
                        <li><a href="hashing">哈希</a>
                        </li>
                        <li><a href="helpers">辅助方法</a>
                        </li>
                        <li><a href="localization">本地化</a>
                        </li>
                        <li><a href="mail">邮件</a>
                        </li>
                        <li><a href="packages">扩展包开发</a>
                        </li>
                        <li><a href="pagination">分页</a>
                        </li>
                        <li><a href="queues">队列</a>
                        </li>
                        <li><a href="redis">Redis</a>
                        </li>
                        <li><a href="session">会话</a>
                        </li>
                        <li><a href="envoy">SSH 任务</a>
                        </li>
                        <li><a href="scheduling">任务调度</a>
                        </li>
                        <li><a href="testing">测试</a>
                        </li>
                        <li><a href="validation">验证</a>
                        </li>
                    </ul>
                </li>
                <li>数据库
                    <ul>
                        <li><a href="database">入门</a>
                        </li>
                        <li><a href="queries">查询构造器</a>
                        </li>
                        <li><a href="migrations">迁移</a>
                        </li>
                        <li><a href="seeding">数据填充</a>
                        </li>
                    </ul>
                </li>
                <li>Eloquent ORM
                    <ul>
                        <li><a href="eloquent">入门</a>
                        </li>
                        <li><a href="eloquent-relationships">关系</a>
                        </li>
                        <li><a href="eloquent-collections">集合</a>
                        </li>
                        <li><a href="eloquent-mutators">调整修改</a>
                        </li>
                        <li><a href="eloquent-serialization">序列化</a>
                        </li>
                    </ul>
                </li>
            </ul>

        </div>

    </nav>

    <div class="docs-wrapper container">

        <section class="sidebar">
            <ul>
                <li>序言
                    <ul>
                        <li><a href="releases">版本说明</a>
                        </li>
                        <li><a href="upgrade">升级指南</a>
                        </li>
                        <li><a href="contributions">贡献指南</a>
                        </li>
                        <li><a href="http://www.golaravel.com/laravel/api/5.1">API 文档</a>
                        </li>
                    </ul>
                </li>
                <li>安装设置
                    <ul>
                        <li><a href="installation">安装</a>
                        </li>
                        <li><a href="homestead">Homestead</a>
                        </li>
                    </ul>
                </li>
                <li>教程
                    <ul>
                        <li><a href="quickstart">入门学习任务</a>
                        </li>
                        <li><a href="quickstart-intermediate">中级学习任务</a>
                        </li>
                    </ul>
                </li>
                <li>基础知识
                    <ul>
                        <li><a href="routing">路由</a>
                        </li>
                        <li><a href="middleware">中间件</a>
                        </li>
                        <li><a href="controllers">控制器</a>
                        </li>
                        <li><a href="requests">请求</a>
                        </li>
                        <li><a href="responses">响应</a>
                        </li>
                        <li><a href="views">视图</a>
                        </li>
                        <li><a href="blade">Blade 模板</a>
                        </li>
                    </ul>
                </li>
                <li>系统架构
                    <ul>
                        <li><a href="lifecycle">请求的生命周期</a>
                        </li>
                        <li><a href="structure">应用程序结构</a>
                        </li>
                        <li><a href="providers">服务提供者</a>
                        </li>
                        <li><a href="container">服务容器</a>
                        </li>
                        <li><a href="contracts">Contract</a>
                        </li>
                        <li><a href="facades">Facade</a>
                        </li>
                    </ul>
                </li>
                <li>系统服务
                    <ul>
                        <li><a href="authentication">认证</a>
                        </li>
                        <li><a href="authorization">授权</a>
                        </li>
                        <li><a href="artisan">Artisan 控制台</a>
                        </li>
                        <li><a href="billing">计费</a>
                        </li>
                        <li><a href="cache">缓存</a>
                        </li>
                        <li><a href="collections">集合</a>
                        </li>
                        <li><a href="elixir">Elixir</a>
                        </li>
                        <li><a href="encryption">加密</a>
                        </li>
                        <li><a href="errors">错误与日志</a>
                        </li>
                        <li><a href="events">事件</a>
                        </li>
                        <li><a href="filesystem">文件系统 / 云存储</a>
                        </li>
                        <li><a href="hashing">哈希</a>
                        </li>
                        <li><a href="helpers">辅助方法</a>
                        </li>
                        <li><a href="localization">本地化</a>
                        </li>
                        <li><a href="mail">邮件</a>
                        </li>
                        <li><a href="packages">扩展包开发</a>
                        </li>
                        <li><a href="pagination">分页</a>
                        </li>
                        <li><a href="queues">队列</a>
                        </li>
                        <li><a href="redis">Redis</a>
                        </li>
                        <li><a href="session">会话</a>
                        </li>
                        <li><a href="envoy">SSH 任务</a>
                        </li>
                        <li><a href="scheduling">任务调度</a>
                        </li>
                        <li><a href="testing">测试</a>
                        </li>
                        <li><a href="validation">验证</a>
                        </li>
                    </ul>
                </li>
                <li>数据库
                    <ul>
                        <li><a href="database">入门</a>
                        </li>
                        <li><a href="queries">查询构造器</a>
                        </li>
                        <li><a href="migrations">迁移</a>
                        </li>
                        <li><a href="seeding">数据填充</a>
                        </li>
                    </ul>
                </li>
                <li>Eloquent ORM
                    <ul>
                        <li><a href="eloquent">入门</a>
                        </li>
                        <li><a href="eloquent-relationships">关系</a>
                        </li>
                        <li><a href="eloquent-collections">集合</a>
                        </li>
                        <li><a href="eloquent-mutators">调整修改</a>
                        </li>
                        <li><a href="eloquent-serialization">序列化</a>
                        </li>
                    </ul>
                </li>
            </ul>

        </section>

        <article>
            <h1>Authorization</h1>
            <ul>
                <li><a href="authorization#introduction">Introduction</a>
                </li>
                <li><a href="authorization#defining-abilities">Defining Abilities</a>
                </li>
                <li><a href="authorization#checking-abilities">Checking Abilities</a>
                    <ul>
                        <li><a href="authorization#via-the-gate-facade">Via The Gate Facade</a>
                        </li>
                        <li><a href="authorization#via-the-user-model">Via The User Model</a>
                        </li>
                        <li><a href="authorization#within-blade-templates">Within Blade Templates</a>
                        </li>
                        <li><a href="authorization#within-form-requests">Within Form Requests</a>
                        </li>
                    </ul>
                </li>
                <li><a href="authorization#policies">Policies</a>
                    <ul>
                        <li><a href="authorization#creating-policies">Creating Policies</a>
                        </li>
                        <li><a href="authorization#writing-policies">Writing Policies</a>
                        </li>
                        <li><a href="authorization#checking-policies">Checking Policies</a>
                        </li>
                    </ul>
                </li>
                <li><a href="authorization#controller-authorization">Controller Authorization</a>
                </li>
            </ul>
            <p>
                <a name="introduction"></a>
            </p>
            <h2>Introduction</h2>
            <p>In addition to providing <a href="authentication">authentication</a> services out of the box, Laravel also provides a simple way to organize authorization logic and control access to resources. There are a variety of methods and
                helpers to assist you in organizing your authorization logic, and we'll cover each of them in this document.</p>
            <blockquote>
                <p><strong>Note:</strong> Authorization was added in Laravel 5.1.11, please refer to the <a href="upgrade">upgrade guide</a> before integrating these features into your application.</p>
            </blockquote>
            <p>
                <a name="defining-abilities"></a>
            </p>
            <h2>Defining Abilities</h2>
            <p>The simplest way to determine if a user may perform a given action is to define an &quot;ability&quot; using the <code>Illuminate\Auth\Access\Gate</code> class. The <code>AuthServiceProvider</code> which ships with Laravel serves as a convenient
                location to define all of the abilities for your application. For example, let's define an <code>update-post</code> ability which receives the current <code>User</code> and a <code>Post</code> <a href="eloquent">model</a>. Within
                our ability, we will determine if the user's <code>id</code> matches the post's <code>user_id</code>:</p>
            <pre><code>&lt;?php

namespace App\Providers;

use Illuminate\Contracts\Auth\Access\Gate as GateContract;
use Illuminate\Foundation\Support\Providers\AuthServiceProvider as ServiceProvider;

class AuthServiceProvider extends ServiceProvider
{
    /**
     * Register any application authentication / authorization services.
     *
     * @param  \Illuminate\Contracts\Auth\Access\Gate  $gate
     * @return void
     */
    public function boot(GateContract $gate)
    {
        $this-&gt;registerPolicies($gate);

        $gate-&gt;define('update-post', function ($user, $post) {
            return $user-&gt;id === $post-&gt;user_id;
        });
    }
}
</code></pre>
            <p>Note that we did not check if the given <code>$user</code> is not <code>NULL</code>. The <code>Gate</code> will automatically return <code>false</code> for <strong>all abilities</strong> when there is not an authenticated user or a specific
                user has not been specified using the <code>forUser</code> method.</p>
            <h4>Class Based Abilities</h4>
            <p>In addition to registering <code>Closures</code> as authorization callbacks, you may register class methods by passing a string containing the class name and the method. When needed, the class will be resolved via the <a href="container">service container</a>:</p>
            <pre><code>$gate-&gt;define('update-post', 'Class@method');
</code></pre>
            <p>
                <a name="intercepting-all-checks"></a>
                <a name="intercepting-authorization-checks"></a>
            </p>
            <h4>Intercepting Authorization Checks</h4>
            <p>Sometimes, you may wish to grant all abilities to a specific user. For this situation, use the <code>before</code> method to define a callback that is run before all other authorization checks:</p>
            <pre><code>$gate-&gt;before(function ($user, $ability) {
    if ($user-&gt;isSuperAdmin()) {
        return true;
    }
});
</code></pre>
            <p>If the <code>before</code> callback returns a non-null result that result will be considered the result of the check.</p>
            <p>You may use the <code>after</code> method to define a callback to be executed after every authorization check. However, you may not modify the result of the authorization check from an <code>after</code> callback:</p>
            <pre><code>$gate-&gt;after(function ($user, $ability, $result, $arguments) {
    //
});
</code></pre>
            <p>
                <a name="checking-abilities"></a>
            </p>
            <h2>Checking Abilities</h2>
            <p>
                <a name="via-the-gate-facade"></a>
            </p>
            <h3>Via The Gate Facade</h3>
            <p>Once an ability has been defined, we may &quot;check&quot; it in a variety of ways. First, we may use the <code>check</code>, <code>allows</code>, or <code>denies</code> methods on the <code>Gate</code> <a href="facades">facade</a>.
                All of these methods receive the name of the ability and the arguments that should be passed to the ability's callback. You do <strong>not</strong> need to pass the current user to these methods, since the <code>Gate</code> will automatically
                prepend the current user to the arguments passed to the callback. So, when checking the <code>update-post</code> ability we defined earlier, we only need to pass a <code>Post</code> instance to the <code>denies</code> method:</p>
            <pre><code>&lt;?php

namespace App\Http\Controllers;

use Gate;
use App\User;
use App\Post;
use App\Http\Controllers\Controller;

class PostController extends Controller
{
    /**
     * Update the given post.
     *
     * @param  int  $id
     * @return Response
     */
    public function update($id)
    {
        $post = Post::findOrFail($id);

        if (Gate::denies('update-post', $post)) {
            abort(403);
        }

        // Update Post...
    }
}
</code></pre>
            <p>Of course, the <code>allows</code> method is simply the inverse of the <code>denies</code> method, and returns <code>true</code> if the action is authorized. The <code>check</code> method is an alias of the <code>allows</code> method.</p>
            <h4>Checking Abilities For Specific Users</h4>
            <p>If you would like to use the <code>Gate</code> facade to check if a user <strong>other than the currently authenticated user</strong> has a given ability, you may use the <code>forUser</code> method:</p>
            <pre><code>if (Gate::forUser($user)-&gt;allows('update-post', $post)) {
    //
}
</code></pre>
            <h4>Passing Multiple Arguments</h4>
            <p>Of course, ability callbacks may receive multiple arguments:</p>
            <pre><code>Gate::define('delete-comment', function ($user, $post, $comment) {
    //
});
</code></pre>
            <p>If your ability needs multiple arguments, simply pass an array of arguments to the <code>Gate</code> methods:</p>
            <pre><code>if (Gate::allows('delete-comment', [$post, $comment])) {
    //
}
</code></pre>
            <p>
                <a name="via-the-user-model"></a>
            </p>
            <h3>Via The User Model</h3>
            <p>Alternatively, you may check abilities via the <code>User</code> model instance. By default, Laravel's <code>App\User</code> model uses an <code>Authorizable</code> trait which provides two methods: <code>can</code> and <code>cannot</code>.
                These methods may be used similarly to the <code>allows</code> and <code>denies</code> methods present on the <code>Gate</code> facade. So, using our previous example, we may modify our code like so:</p>
            <pre><code>&lt;?php

namespace App\Http\Controllers;

use App\Post;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;

class PostController extends Controller
{
    /**
     * Update the given post.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return Response
     */
    public function update(Request $request, $id)
    {
        $post = Post::findOrFail($id);

        if ($request-&gt;user()-&gt;cannot('update-post', $post)) {
            abort(403);
        }

        // Update Post...
    }
}
</code></pre>
            <p>Of course, the <code>can</code> method is simply the inverse of the <code>cannot</code> method:</p>
            <pre><code>if ($request-&gt;user()-&gt;can('update-post', $post)) {
    // Update Post...
}
</code></pre>
            <p>
                <a name="within-blade-templates"></a>
            </p>
            <h3>Within Blade Templates</h3>
            <p>For convenience, Laravel provides the <code>@can</code> Blade directive to quickly check if the currently authenticated user has a given ability. For example:</p>
            <pre><code>&lt;a href=&quot;/post/{{ $post-&gt;id }}&quot;&gt;View Post&lt;/a&gt;

@can('update-post', $post)
    &lt;a href=&quot;/post/{{ $post-&gt;id }}/edit&quot;&gt;Edit Post&lt;/a&gt;
@endcan
</code></pre>
            <p>You may also combine the <code>@can</code> directive with <code>@else</code> directive:</p>
            <pre><code>@can('update-post', $post)
    &lt;!-- The Current User Can Update The Post --&gt;
@else
    &lt;!-- The Current User Can't Update The Post --&gt;
@endcan
</code></pre>
            <p>
                <a name="within-form-requests"></a>
            </p>
            <h3>Within Form Requests</h3>
            <p>You may also choose to utilize your <code>Gate</code> defined abilities from a <a href="validation#form-request-validation">form request's</a> <code>authorize</code> method. For example:</p>
            <pre><code>/**
 * Determine if the user is authorized to make this request.
 *
 * @return bool
 */
public function authorize()
{
    $postId = $this-&gt;route('post');

    return Gate::allows('update', Post::findOrFail($postId));
}
</code></pre>
            <p>
                <a name="policies"></a>
            </p>
            <h2>Policies</h2>
            <p>
                <a name="creating-policies"></a>
            </p>
            <h3>Creating Policies</h3>
            <p>Since defining all of your authorization logic in the <code>AuthServiceProvider</code> could become cumbersome in large applications, Laravel allows you to split your authorization logic into &quot;Policy&quot; classes. Policies are plain
                PHP classes that group authorization logic based on the resource they authorize.</p>
            <p>First, let's generate a policy to manage authorization for our <code>Post</code> model. You may generate a policy using the <code>make:policy</code> <a href="artisan">artisan command</a>. The generated policy will be placed in the
                <code>app/Policies</code> directory:</p>
            <pre><code>php artisan make:policy PostPolicy
</code></pre>
            <h4>Registering Policies</h4>
            <p>Once the policy exists, we need to register it with the <code>Gate</code> class. The <code>AuthServiceProvider</code> contains a <code>policies</code> property which maps various entities to the policies that manage them. So, we will specify
                that the <code>Post</code> model's policy is the <code>PostPolicy</code> class:</p>
            <pre><code>&lt;?php

namespace App\Providers;

use App\Post;
use App\Policies\PostPolicy;
use Illuminate\Foundation\Support\Providers\AuthServiceProvider as ServiceProvider;

class AuthServiceProvider extends ServiceProvider
{
    /**
     * The policy mappings for the application.
     *
     * @var array
     */
    protected $policies = [
        Post::class =&gt; PostPolicy::class,
    ];

    /**
     * Register any application authentication / authorization services.
     *
     * @param  \Illuminate\Contracts\Auth\Access\Gate  $gate
     * @return void
     */
    public function boot(GateContract $gate)
    {
        $this-&gt;registerPolicies($gate);
    }
}
</code></pre>
            <p>
                <a name="writing-policies"></a>
            </p>
            <h3>Writing Policies</h3>
            <p>Once the policy has been generated and registered, we can add methods for each ability it authorizes. For example, let's define an <code>update</code> method on our <code>PostPolicy</code>, which will determine if the given <code>User</code>                can &quot;update&quot; a <code>Post</code>:</p>
            <pre><code>&lt;?php

namespace App\Policies;

use App\User;
use App\Post;

class PostPolicy
{
    /**
     * Determine if the given post can be updated by the user.
     *
     * @param  \App\User  $user
     * @param  \App\Post  $post
     * @return bool
     */
    public function update(User $user, Post $post)
    {
        return $user-&gt;id === $post-&gt;user_id;
    }
}
</code></pre>
            <p>You may continue to define additional methods on the policy as needed for the various abilities it authorizes. For example, you might define <code>show</code>, <code>destroy</code>, or <code>addComment</code> methods to authorize various <code>Post</code>                actions.</p>
            <blockquote>
                <p><strong>Note:</strong> All policies are resolved via the Laravel <a href="container">service container</a>, meaning you may type-hint any needed dependencies in the policy's constructor and they will be automatically injected.</p>
            </blockquote>
            <h4>Intercepting All Checks</h4>
            <p>Sometimes, you may wish to grant all abilities to a specific user on a policy. For this situation, define a <code>before</code> method on the policy. This method will be run before all other authorization checks on the policy:</p>
            <pre><code>public function before($user, $ability)
{
    if ($user-&gt;isSuperAdmin()) {
        return true;
    }
}
</code></pre>
            <p>If the <code>before</code> method returns a non-null result that result will be considered the result of the check.</p>
            <p>
                <a name="checking-policies"></a>
            </p>
            <h3>Checking Policies</h3>
            <p>Policy methods are called in exactly the same way as <code>Closure</code> based authorization callbacks. You may use the <code>Gate</code> facade, the <code>User</code> model, the <code>@can</code> Blade directive, or the <code>policy</code>                helper.</p>
            <h4>Via The Gate Facade</h4>
            <p>The <code>Gate</code> will automatically determine which policy to use by examining the class of the arguments passed to its methods. So, if we pass a <code>Post</code> instance to the <code>denies</code> method, the <code>Gate</code> will
                utilize the corresponding <code>PostPolicy</code> to authorize actions:</p>
            <pre><code>&lt;?php

namespace App\Http\Controllers;

use Gate;
use App\User;
use App\Post;
use App\Http\Controllers\Controller;

class PostController extends Controller
{
    /**
     * Update the given post.
     *
     * @param  int  $id
     * @return Response
     */
    public function update($id)
    {
        $post = Post::findOrFail($id);

        if (Gate::denies('update', $post)) {
            abort(403);
        }

        // Update Post...
    }
}
</code></pre>
            <h4>Via The User Model</h4>
            <p>The <code>User</code> model's <code>can</code> and <code>cannot</code> methods will also automatically utilize policies when they are available for the given arguments. These methods provide a convenient way to authorize actions for any <code>User</code>                instance retrieved by your application:</p>
            <pre><code>if ($user-&gt;can('update', $post)) {
    //
}

if ($user-&gt;cannot('update', $post)) {
    //
}
</code></pre>
            <h4>Within Blade Templates</h4>
            <p>Likewise, the <code>@can</code> Blade directive will utilize policies when they are available for the given arguments:</p>
            <pre><code>@can('update', $post)
    &lt;!-- The Current User Can Update The Post --&gt;
@endcan
</code></pre>
            <h4>Via The Policy Helper</h4>
            <p>The global <code>policy</code> helper function may be used to retrieve the <code>Policy</code> class for a given class instance. For example, we may pass a <code>Post</code> instance to the <code>policy</code> helper to get an instance of
                our corresponding <code>PostPolicy</code> class:</p>
            <pre><code>if (policy($post)-&gt;update($user, $post)) {
    //
}
</code></pre>
            <p>
                <a name="controller-authorization"></a>
            </p>
            <h2>Controller Authorization</h2>
            <p>By default, the base <code>App\Http\Controllers\Controller</code> class included with Laravel uses the <code>AuthorizesRequests</code> trait. This trait provides the <code>authorize</code> method, which may be used to quickly authorize a given
                action and throw a <code>HttpException</code> if the action is not authorized.</p>
            <p>The <code>authorize</code> method shares the same signature as the various other authorization methods such as <code>Gate::allows</code> and <code>$user-&gt;can()</code>. So, let's use the <code>authorize</code> method to quickly authorize
                a request to update a <code>Post</code>:</p>
            <pre><code>&lt;?php

namespace App\Http\Controllers;

use App\Post;
use App\Http\Controllers\Controller;

class PostController extends Controller
{
    /**
     * Update the given post.
     *
     * @param  int  $id
     * @return Response
     */
    public function update($id)
    {
        $post = Post::findOrFail($id);

        $this-&gt;authorize('update', $post);

        // Update Post...
    }
}
</code></pre>
            <p>If the action is authorized, the controller will continue executing normally; however, if the <code>authorize</code> method determines that the action is not authorized, a <code>HttpException</code> will automatically be thrown which generates
                a HTTP response with a <code>403 Not Authorized</code> status code. As you can see, the <code>authorize</code> method is a convenient, fast way to authorize an action or throw an exception with a single line of code.</p>
            <p>The <code>AuthorizesRequests</code> trait also provides the <code>authorizeForUser</code> method to authorize an action on a user that is not the currently authenticated user:</p>
            <pre><code>$this-&gt;authorizeForUser($user, 'update', $post);
</code></pre>
            <h4>Automatically Determining Policy Methods</h4>
            <p>Frequently, a policy's methods will correspond to the methods on a controller. For example, in the <code>update</code> method above, the controller method and the policy method share the same name: <code>update</code>.</p>
            <p>For this reason, Laravel allows you to simply pass the instance arguments to the <code>authorize</code> method, and the ability being authorized will automatically be determined based on the name of the calling function. In this example, since
                <code>authorize</code> is called from the controller's <code>update</code> method, the <code>update</code> method will also be called on the <code>PostPolicy</code>:</p>
            <pre><code>/**
 * Update the given post.
 *
 * @param  int  $id
 * @return Response
 */
public function update($id)
{
    $post = Post::findOrFail($id);

    $this-&gt;authorize($post);

    // Update Post...
}
</code></pre>

        </article>
    </div>


    <footer class="main">
        <ul>
            <li class="nav-docs"><a href="http://www.golaravel.com/laravel/docs/">中文文档</a>
            </li>
            <li class="nav-community"><a href="http://wenda.golaravel.com" target="_blank">问答社区</a>
            </li>
            <li class="nav-api"><a href="http://laravel.com/api/5.0/" target="_blank">API</a>
            </li>
            <li class="nav-laracasts"><a href="https://laracasts.com" target="_blank">视频教程（国外）</a>
            </li>
            <li class="nav-forge"><a href="https://forge.laravel.com" target="_blank">Forge</a>
            </li>

        </ul>
        <p>Laravel is a trademark of Taylor Otwell. Copyright &copy; Taylor Otwell.</p>
        <p class="less-significant"><a href="http://jackmcdade.com" target="_blank">Design by Jack McDade</a>
        </p>
    </footer>

    <script src="../../assets/js/laravel.js"></script>
    <script src="../../assets/js/viewport-units-buggyfill.js"></script>
    <script>
        window.viewportUnitsBuggyfill.init();
    </script>
    <script type="text/javascript">
        var _bdhmProtocol = (("https:" == document.location.protocol) ? " https://" : " http://");
        document.write(unescape("%3Cscript src='" + _bdhmProtocol + "hm.baidu.com/h.js%3Fc8d13872a523d9c286aa7affbe0921f1' type='text/javascript'%3E%3C/script%3E"));
    </script>
</body>

</html>