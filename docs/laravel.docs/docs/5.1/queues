<!doctype html>
<html lang="zh-CN">

<head>
    <meta charset="utf-8">
    <title>Queues - Laravel 5.1 中文文档 | Laravel 中文网</title>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta name="author" content="Laravel 中文网">
    <meta name="description" content="Laravel - 为 WEB 艺术家创造的 PHP 框架。| Laravel 中文网">
    <meta name="keywords" content="Laravel中文社区,php框架,laravel中文网,php framework,restful routing,laravel,laravel php">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!--[if lte IE 9]>
		<script src="http://cdn.bootcss.com/html5shiv/3.7.2/html5shiv.min.js"></script>
	<![endif]-->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="../../assets/css/laravel.css">
    <link rel="stylesheet" href="../../assets/css/patch.css">
</head>

<body class="docs language-php">

    <span class="overlay"></span>

    <nav class="main">
        <div class="container">
            <a href="http://www.golaravel.com/laravel/" class="brand">
                <img src="../../assets/img/laravel-logo.png" height="30"> Laravel
            </a>

            <div class="responsive-sidebar-nav">
                <a href="queues#" class="toggle-slide menu-link btn">&#9776;</a>
            </div>

            <div class="switcher">
                <div class="dropdown">
                    <button class="btn dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-expanded="true">
                        <!--<span class="faint">v</span> -->
                        5.1
                        <span class="caret"></span>
                    </button>
                    <ul class="dropdown-menu" role="menu" aria-labelledby="dropdownMenu1">
                        <li role="presentation">
                            <a role="menuitem" tabindex="-1" href="index.html">5.1</a>
                        </li>
                        <li role="presentation">
                            <a role="menuitem" tabindex="-1" href="http://www.golaravel.com/laravel/docs/5.0">5.0</a>
                        </li>
                        <li role="presentation">
                            <a role="menuitem" tabindex="-1" href="http://www.golaravel.com/laravel/docs/4.2">4.2</a>
                        </li>
                        <li role="presentation">
                            <a role="menuitem" tabindex="-1" href="http://www.golaravel.com/laravel/docs/4.1">4.1</a>
                        </li>
                        <li role="presentation">
                            <a role="menuitem" tabindex="-1" href="http://www.golaravel.com/laravel/docs/4.0">4.0</a>
                        </li>
                    </ul>
                </div>
            </div>

            <ul class="main-nav">
                <li class="nav-docs"><a href="http://www.golaravel.com/laravel/docs/">中文文档</a>
                </li>
                <li class="nav-community"><a href="http://wenda.golaravel.com" target="_blank">问答社区</a>
                </li>
                <li class="nav-api"><a href="http://laravel.com/api/5.0/" target="_blank">API</a>
                </li>
                <li class="nav-laracasts"><a href="https://laracasts.com" target="_blank">视频教程（国外）</a>
                </li>
                <li class="nav-forge"><a href="https://forge.laravel.com" target="_blank">Forge</a>
                </li>

            </ul>
        </div>
    </nav>

    <nav id="slide-menu" class="slide-menu" role="navigation">

        <div class="brand">
            <a href="http://www.golaravel.com/laravel/">
                <img src="../../assets/img/laravel-logo-white.png" height="50">
            </a>
        </div>

        <ul class="slide-main-nav">
            <li><a href="http://www.golaravel.com/laravel/">首页</a>
            </li>
            <li class="nav-docs"><a href="http://www.golaravel.com/laravel/docs/">中文文档</a>
            </li>
            <li class="nav-community"><a href="http://wenda.golaravel.com" target="_blank">问答社区</a>
            </li>
            <li class="nav-api"><a href="http://laravel.com/api/5.0/" target="_blank">API</a>
            </li>
            <li class="nav-laracasts"><a href="https://laracasts.com" target="_blank">视频教程（国外）</a>
            </li>
            <li class="nav-forge"><a href="https://forge.laravel.com" target="_blank">Forge</a>
            </li>

        </ul>

        <div class="slide-docs-nav">
            <h2>文档目录</h2>
            <ul>
                <li>序言
                    <ul>
                        <li><a href="releases">版本说明</a>
                        </li>
                        <li><a href="upgrade">升级指南</a>
                        </li>
                        <li><a href="contributions">贡献指南</a>
                        </li>
                        <li><a href="http://www.golaravel.com/laravel/api/5.1">API 文档</a>
                        </li>
                    </ul>
                </li>
                <li>安装设置
                    <ul>
                        <li><a href="installation">安装</a>
                        </li>
                        <li><a href="homestead">Homestead</a>
                        </li>
                    </ul>
                </li>
                <li>教程
                    <ul>
                        <li><a href="quickstart">入门学习任务</a>
                        </li>
                        <li><a href="quickstart-intermediate">中级学习任务</a>
                        </li>
                    </ul>
                </li>
                <li>基础知识
                    <ul>
                        <li><a href="routing">路由</a>
                        </li>
                        <li><a href="middleware">中间件</a>
                        </li>
                        <li><a href="controllers">控制器</a>
                        </li>
                        <li><a href="requests">请求</a>
                        </li>
                        <li><a href="responses">响应</a>
                        </li>
                        <li><a href="views">视图</a>
                        </li>
                        <li><a href="blade">Blade 模板</a>
                        </li>
                    </ul>
                </li>
                <li>系统架构
                    <ul>
                        <li><a href="lifecycle">请求的生命周期</a>
                        </li>
                        <li><a href="structure">应用程序结构</a>
                        </li>
                        <li><a href="providers">服务提供者</a>
                        </li>
                        <li><a href="container">服务容器</a>
                        </li>
                        <li><a href="contracts">Contract</a>
                        </li>
                        <li><a href="facades">Facade</a>
                        </li>
                    </ul>
                </li>
                <li>系统服务
                    <ul>
                        <li><a href="authentication">认证</a>
                        </li>
                        <li><a href="authorization">授权</a>
                        </li>
                        <li><a href="artisan">Artisan 控制台</a>
                        </li>
                        <li><a href="billing">计费</a>
                        </li>
                        <li><a href="cache">缓存</a>
                        </li>
                        <li><a href="collections">集合</a>
                        </li>
                        <li><a href="elixir">Elixir</a>
                        </li>
                        <li><a href="encryption">加密</a>
                        </li>
                        <li><a href="errors">错误与日志</a>
                        </li>
                        <li><a href="events">事件</a>
                        </li>
                        <li><a href="filesystem">文件系统 / 云存储</a>
                        </li>
                        <li><a href="hashing">哈希</a>
                        </li>
                        <li><a href="helpers">辅助方法</a>
                        </li>
                        <li><a href="localization">本地化</a>
                        </li>
                        <li><a href="mail">邮件</a>
                        </li>
                        <li><a href="packages">扩展包开发</a>
                        </li>
                        <li><a href="pagination">分页</a>
                        </li>
                        <li><a href="queues">队列</a>
                        </li>
                        <li><a href="redis">Redis</a>
                        </li>
                        <li><a href="session">会话</a>
                        </li>
                        <li><a href="envoy">SSH 任务</a>
                        </li>
                        <li><a href="scheduling">任务调度</a>
                        </li>
                        <li><a href="testing">测试</a>
                        </li>
                        <li><a href="validation">验证</a>
                        </li>
                    </ul>
                </li>
                <li>数据库
                    <ul>
                        <li><a href="database">入门</a>
                        </li>
                        <li><a href="queries">查询构造器</a>
                        </li>
                        <li><a href="migrations">迁移</a>
                        </li>
                        <li><a href="seeding">数据填充</a>
                        </li>
                    </ul>
                </li>
                <li>Eloquent ORM
                    <ul>
                        <li><a href="eloquent">入门</a>
                        </li>
                        <li><a href="eloquent-relationships">关系</a>
                        </li>
                        <li><a href="eloquent-collections">集合</a>
                        </li>
                        <li><a href="eloquent-mutators">调整修改</a>
                        </li>
                        <li><a href="eloquent-serialization">序列化</a>
                        </li>
                    </ul>
                </li>
            </ul>

        </div>

    </nav>

    <div class="docs-wrapper container">

        <section class="sidebar">
            <ul>
                <li>序言
                    <ul>
                        <li><a href="releases">版本说明</a>
                        </li>
                        <li><a href="upgrade">升级指南</a>
                        </li>
                        <li><a href="contributions">贡献指南</a>
                        </li>
                        <li><a href="http://www.golaravel.com/laravel/api/5.1">API 文档</a>
                        </li>
                    </ul>
                </li>
                <li>安装设置
                    <ul>
                        <li><a href="installation">安装</a>
                        </li>
                        <li><a href="homestead">Homestead</a>
                        </li>
                    </ul>
                </li>
                <li>教程
                    <ul>
                        <li><a href="quickstart">入门学习任务</a>
                        </li>
                        <li><a href="quickstart-intermediate">中级学习任务</a>
                        </li>
                    </ul>
                </li>
                <li>基础知识
                    <ul>
                        <li><a href="routing">路由</a>
                        </li>
                        <li><a href="middleware">中间件</a>
                        </li>
                        <li><a href="controllers">控制器</a>
                        </li>
                        <li><a href="requests">请求</a>
                        </li>
                        <li><a href="responses">响应</a>
                        </li>
                        <li><a href="views">视图</a>
                        </li>
                        <li><a href="blade">Blade 模板</a>
                        </li>
                    </ul>
                </li>
                <li>系统架构
                    <ul>
                        <li><a href="lifecycle">请求的生命周期</a>
                        </li>
                        <li><a href="structure">应用程序结构</a>
                        </li>
                        <li><a href="providers">服务提供者</a>
                        </li>
                        <li><a href="container">服务容器</a>
                        </li>
                        <li><a href="contracts">Contract</a>
                        </li>
                        <li><a href="facades">Facade</a>
                        </li>
                    </ul>
                </li>
                <li>系统服务
                    <ul>
                        <li><a href="authentication">认证</a>
                        </li>
                        <li><a href="authorization">授权</a>
                        </li>
                        <li><a href="artisan">Artisan 控制台</a>
                        </li>
                        <li><a href="billing">计费</a>
                        </li>
                        <li><a href="cache">缓存</a>
                        </li>
                        <li><a href="collections">集合</a>
                        </li>
                        <li><a href="elixir">Elixir</a>
                        </li>
                        <li><a href="encryption">加密</a>
                        </li>
                        <li><a href="errors">错误与日志</a>
                        </li>
                        <li><a href="events">事件</a>
                        </li>
                        <li><a href="filesystem">文件系统 / 云存储</a>
                        </li>
                        <li><a href="hashing">哈希</a>
                        </li>
                        <li><a href="helpers">辅助方法</a>
                        </li>
                        <li><a href="localization">本地化</a>
                        </li>
                        <li><a href="mail">邮件</a>
                        </li>
                        <li><a href="packages">扩展包开发</a>
                        </li>
                        <li><a href="pagination">分页</a>
                        </li>
                        <li><a href="queues">队列</a>
                        </li>
                        <li><a href="redis">Redis</a>
                        </li>
                        <li><a href="session">会话</a>
                        </li>
                        <li><a href="envoy">SSH 任务</a>
                        </li>
                        <li><a href="scheduling">任务调度</a>
                        </li>
                        <li><a href="testing">测试</a>
                        </li>
                        <li><a href="validation">验证</a>
                        </li>
                    </ul>
                </li>
                <li>数据库
                    <ul>
                        <li><a href="database">入门</a>
                        </li>
                        <li><a href="queries">查询构造器</a>
                        </li>
                        <li><a href="migrations">迁移</a>
                        </li>
                        <li><a href="seeding">数据填充</a>
                        </li>
                    </ul>
                </li>
                <li>Eloquent ORM
                    <ul>
                        <li><a href="eloquent">入门</a>
                        </li>
                        <li><a href="eloquent-relationships">关系</a>
                        </li>
                        <li><a href="eloquent-collections">集合</a>
                        </li>
                        <li><a href="eloquent-mutators">调整修改</a>
                        </li>
                        <li><a href="eloquent-serialization">序列化</a>
                        </li>
                    </ul>
                </li>
            </ul>

        </section>

        <article>
            <h1>Queues</h1>
            <ul>
                <li><a href="queues#introduction">Introduction</a>
                </li>
                <li><a href="queues#writing-job-classes">Writing Job Classes</a>
                    <ul>
                        <li><a href="queues#generating-job-classes">Generating Job Classes</a>
                        </li>
                        <li><a href="queues#job-class-structure">Job Class Structure</a>
                        </li>
                    </ul>
                </li>
                <li><a href="queues#pushing-jobs-onto-the-queue">Pushing Jobs Onto The Queue</a>
                    <ul>
                        <li><a href="queues#delayed-jobs">Delayed Jobs</a>
                        </li>
                        <li><a href="queues#dispatching-jobs-from-requests">Dispatching Jobs From Requests</a>
                        </li>
                        <li><a href="queues#job-events">Job Events</a>
                        </li>
                    </ul>
                </li>
                <li><a href="queues#running-the-queue-listener">Running The Queue Listener</a>
                    <ul>
                        <li><a href="queues#supervisor-configuration">Supervisor Configuration</a>
                        </li>
                        <li><a href="queues#daemon-queue-listener">Daemon Queue Listener</a>
                        </li>
                        <li><a href="queues#deploying-with-daemon-queue-listeners">Deploying With Daemon Queue Listeners</a>
                        </li>
                    </ul>
                </li>
                <li><a href="queues#dealing-with-failed-jobs">Dealing With Failed Jobs</a>
                    <ul>
                        <li><a href="queues#failed-job-events">Failed Job Events</a>
                        </li>
                        <li><a href="queues#retrying-failed-jobs">Retrying Failed Jobs</a>
                        </li>
                    </ul>
                </li>
            </ul>
            <p>
                <a name="introduction"></a>
            </p>
            <h2>Introduction</h2>
            <p>The Laravel queue service provides a unified API across a variety of different queue back-ends. Queues allow you to defer the processing of a time consuming task, such as sending an e-mail, until a later time which drastically speeds up web
                requests to your application.</p>
            <p>
                <a name="configuration"></a>
            </p>
            <h3>Configuration</h3>
            <p>The queue configuration file is stored in <code>config/queue.php</code>. In this file you will find connection configurations for each of the queue drivers that are included with the framework, which includes a database, <a href="http://kr.github.com/beanstalkd" target="_blank">Beanstalkd</a>,
                <a href="http://iron.io" target="_blank">IronMQ</a>, <a href="http://aws.amazon.com/sqs" target="_blank">Amazon SQS</a>, <a href="http://redis.io" target="_blank">Redis</a>, and synchronous (for local use) driver.</p>
            <p>A <code>null</code> queue driver is also included which simply discards queued jobs.</p>
            <h3>Driver Prerequisites</h3>
            <h4>Database</h4>
            <p>In order to use the <code>database</code> queue driver, you will need a database table to hold the jobs. To generate a migration that creates this table, run the <code>queue:table</code> Artisan command. Once the migration is created, you
                may migrate your database using the <code>migrate</code> command:</p>
            <pre><code>php artisan queue:table

php artisan migrate
</code></pre>
            <h4>Other Queue Dependencies</h4>
            <p>The following dependencies are needed for the listed queue drivers:</p>
            <ul>
                <li>Amazon SQS: <code>aws/aws-sdk-php ~3.0</code>
                </li>
                <li>Beanstalkd: <code>pda/pheanstalk ~3.0</code>
                </li>
                <li>IronMQ: <code>iron-io/iron_mq ~2.0|~4.0</code>
                </li>
                <li>Redis: <code>predis/predis ~1.0</code>
                </li>
            </ul>
            <p>
                <a name="writing-job-classes"></a>
            </p>
            <h2>Writing Job Classes</h2>
            <p>
                <a name="generating-job-classes"></a>
            </p>
            <h3>Generating Job Classes</h3>
            <p>By default, all of the queueable jobs for your application are stored in the <code>app/Jobs</code> directory. You may generate a new queued job using the Artisan CLI:</p>
            <pre><code>php artisan make:job SendReminderEmail --queued
</code></pre>
            <p>This command will generate a new class in the <code>app/Jobs</code> directory, and the class will implement the <code>Illuminate\Contracts\Queue\ShouldQueue</code> interface, indicating to Laravel that the job should be pushed onto the queue
                instead of run synchronously.</p>
            <p>
                <a name="job-class-structure"></a>
            </p>
            <h3>Job Class Structure</h3>
            <p>Job classes are very simple, normally containing only a <code>handle</code> method which is called when the job is processed by the queue. To get started, let's take a look at an example job class:</p>
            <pre><code>&lt;?php

namespace App\Jobs;

use App\User;
use App\Jobs\Job;
use Illuminate\Contracts\Mail\Mailer;
use Illuminate\Queue\SerializesModels;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Contracts\Bus\SelfHandling;
use Illuminate\Contracts\Queue\ShouldQueue;

class SendReminderEmail extends Job implements SelfHandling, ShouldQueue
{
    use InteractsWithQueue, SerializesModels;

    protected $user;

    /**
     * Create a new job instance.
     *
     * @param  User  $user
     * @return void
     */
    public function __construct(User $user)
    {
        $this-&gt;user = $user;
    }

    /**
     * Execute the job.
     *
     * @param  Mailer  $mailer
     * @return void
     */
    public function handle(Mailer $mailer)
    {
        $mailer-&gt;send('emails.reminder', ['user' =&gt; $this-&gt;user], function ($m) {
            //
        });

        $this-&gt;user-&gt;reminders()-&gt;create(...);
    }
}
</code></pre>
            <p>In this example, note that we were able to pass an <a href="eloquent">Eloquent model</a> directly into the queued job's constructor. Because of the <code>SerializesModels</code> trait that the job is using, Eloquent models will be
                gracefully serialized and unserialized when the job is processing. If your queued job accepts an Eloquent model in its constructor, only the identifier for the model will be serialized onto the queue. When the job is actually handled,
                the queue system will automatically re-retrieve the full model instance from the database. It's all totally transparent to your application and prevents issues that can arise from serializing full Eloquent model instances.</p>
            <p>The <code>handle</code> method is called when the job is processed by the queue. Note that we are able to type-hint dependencies on the <code>handle</code> method of the job. The Laravel <a href="container">service container</a>                automatically injects these dependencies.</p>
            <h4>When Things Go Wrong</h4>
            <p>If an exception is thrown while the job is being processed, it will automatically be released back onto the queue so it may be attempted again. The job will continue to be released until it has been attempted the maximum number of times allowed
                by your application. The number of maximum attempts is defined by the <code>--tries</code> switch used on the <code>queue:listen</code> or <code>queue:work</code> Artisan jobs. More information on running the queue listener <a href="queues#running-the-queue-listener">can be found below</a>.</p>
            <h4>Manually Releasing Jobs</h4>
            <p>If you would like to <code>release</code> the job manually, the <code>InteractsWithQueue</code> trait, which is already included in your generated job class, provides access to the queue job <code>release</code> method. The <code>release</code>                method accepts one argument: the number of seconds you wish to wait until the job is made available again:</p>
            <pre><code>public function handle(Mailer $mailer)
{
    if (condition) {
        $this-&gt;release(10);
    }
}
</code></pre>
            <h4>Checking The Number Of Run Attempts</h4>
            <p>As noted above, if an exception occurs while the job is being processed, it will automatically be released back onto the queue. You may check the number of attempts that have been made to run the job using the <code>attempts</code> method:</p>
            <pre><code>public function handle(Mailer $mailer)
{
    if ($this-&gt;attempts() &gt; 3) {
        //
    }
}
</code></pre>
            <p>
                <a name="pushing-jobs-onto-the-queue"></a>
            </p>
            <h2>Pushing Jobs Onto The Queue</h2>
            <p>The default Laravel controller located in <code>app/Http/Controllers/Controller.php</code> uses a <code>DispatchesJobs</code> trait. This trait provides several methods allowing you to conveniently push jobs onto the queue, such as the <code>dispatch</code>                method:</p>
            <pre><code>&lt;?php

namespace App\Http\Controllers;

use App\User;
use Illuminate\Http\Request;
use App\Jobs\SendReminderEmail;
use App\Http\Controllers\Controller;

class UserController extends Controller
{
    /**
     * Send a reminder e-mail to a given user.
     *
     * @param  Request  $request
     * @param  int  $id
     * @return Response
     */
    public function sendReminderEmail(Request $request, $id)
    {
        $user = User::findOrFail($id);

        $this-&gt;dispatch(new SendReminderEmail($user));
    }
}
</code></pre>
            <p>Of course, sometimes you may wish to dispatch a job from somewhere in your application besides a route or controller. For that reason, you can include the <code>DispatchesJobs</code> trait on any of the classes in your application to gain
                access to its various dispatch methods. For example, here is a sample class that uses the trait:</p>
            <pre><code>&lt;?php

namespace App;

use Illuminate\Foundation\Bus\DispatchesJobs;

class ExampleClass
{
    use DispatchesJobs;
}
</code></pre>
            <h4>Specifying The Queue For A Job</h4>
            <p>You may also specify the queue a job should be sent to.</p>
            <p>By pushing jobs to different queues, you may &quot;categorize&quot; your queued jobs, and even prioritize how many workers you assign to various queues. This does not push jobs to different queue &quot;connections&quot; as defined by your
                queue configuration file, but only to specific queues within a single connection. To specify the queue, use the <code>onQueue</code> method on the job instance. The <code>onQueue</code> method is provided by the <code>Illuminate\Bus\Queueable</code>                trait, which is already included on the <code>App\Jobs\Job</code> base class:</p>
            <pre><code>&lt;?php

namespace App\Http\Controllers;

use App\User;
use Illuminate\Http\Request;
use App\Jobs\SendReminderEmail;
use App\Http\Controllers\Controller;

class UserController extends Controller
{
    /**
     * Send a reminder e-mail to a given user.
     *
     * @param  Request  $request
     * @param  int  $id
     * @return Response
     */
    public function sendReminderEmail(Request $request, $id)
    {
        $user = User::findOrFail($id);

        $job = (new SendReminderEmail($user))-&gt;onQueue('emails');

        $this-&gt;dispatch($job);
    }
}
</code></pre>
            <p>
                <a name="delayed-jobs"></a>
            </p>
            <h3>Delayed Jobs</h3>
            <p>Sometimes you may wish to delay the execution of a queued job. For instance, you may wish to queue a job that sends a customer a reminder e-mail 15 minutes after sign-up. You may accomplish this using the <code>delay</code> method on your
                job class, which is provided by the <code>Illuminate\Bus\Queueable</code> trait:</p>
            <pre><code>&lt;?php

namespace App\Http\Controllers;

use App\User;
use Illuminate\Http\Request;
use App\Jobs\SendReminderEmail;
use App\Http\Controllers\Controller;

class UserController extends Controller
{
    /**
     * Send a reminder e-mail to a given user.
     *
     * @param  Request  $request
     * @param  int  $id
     * @return Response
     */
    public function sendReminderEmail(Request $request, $id)
    {
        $user = User::findOrFail($id);

        $job = (new SendReminderEmail($user))-&gt;delay(60);

        $this-&gt;dispatch($job);
    }
}
</code></pre>
            <p>In this example, we're specifying that the job should be delayed in the queue for 60 seconds before being made available to workers.</p>
            <blockquote>
                <p><strong>Note:</strong> The Amazon SQS service has a maximum delay time of 15 minutes.</p>
            </blockquote>
            <p>
                <a name="dispatching-jobs-from-requests"></a>
            </p>
            <h3>Dispatching Jobs From Requests</h3>
            <p>It is very common to map HTTP request variables into jobs. So, instead of forcing you to do this manually for each request, Laravel provides some helper methods to make it a cinch. Let's take a look at the <code>dispatchFrom</code> method
                available on the <code>DispatchesJobs</code> trait. By default, this trait is included on the base Laravel controller class:</p>
            <pre><code>&lt;?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;

class CommerceController extends Controller
{
    /**
     * Process the given order.
     *
     * @param  Request  $request
     * @param  int  $id
     * @return Response
     */
    public function processOrder(Request $request, $id)
    {
        // Process the request...

        $this-&gt;dispatchFrom('App\Jobs\ProcessOrder', $request);
    }
}
</code></pre>
            <p>This method will examine the constructor of the given job class and extract variables from the HTTP request (or any other <code>ArrayAccess</code> object) to fill the needed constructor parameters of the job. So, if our job class accepts a
                <code>productId</code> variable in its constructor, the job bus will attempt to pull the <code>productId</code> parameter from the HTTP request.</p>
            <p>You may also pass an array as the third argument to the <code>dispatchFrom</code> method. This array will be used to fill any constructor parameters that are not available on the request:</p>
            <pre><code>$this-&gt;dispatchFrom('App\Jobs\ProcessOrder', $request, [
    'taxPercentage' =&gt; 20,
]);
</code></pre>
            <p>
                <a name="job-events"></a>
            </p>
            <h3>Job Events</h3>
            <h4>Job Completion Event</h4>
            <p>The <code>Queue::after</code> method allows you to register a callback to be executed when a queued job executes successfully. This callback is a great opportunity to perform additional logging, queue a subsequent job, or increment statistics
                for a dashboard. For example, we may attach a callback to this event from the <code>AppServiceProvider</code> that is included with Laravel:</p>
            <pre><code>&lt;?php

namespace App\Providers;

use Queue;
use Illuminate\Support\ServiceProvider;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Bootstrap any application services.
     *
     * @return void
     */
    public function boot()
    {
        Queue::after(function ($connection, $job, $data) {
            //
        });
    }

    /**
     * Register the service provider.
     *
     * @return void
     */
    public function register()
    {
        //
    }
}
</code></pre>
            <p>
                <a name="running-the-queue-listener"></a>
            </p>
            <h2>Running The Queue Listener</h2>
            <h4>Starting The Queue Listener</h4>
            <p>Laravel includes an Artisan command that will run new jobs as they are pushed onto the queue. You may run the listener using the <code>queue:listen</code> command:</p>
            <pre><code>php artisan queue:listen
</code></pre>
            <p>You may also specify which queue connection the listener should utilize:</p>
            <pre><code>php artisan queue:listen connection
</code></pre>
            <p>Note that once this task has started, it will continue to run until it is manually stopped. You may use a process monitor such as <a href="http://supervisord.org/" target="_blank">Supervisor</a> to ensure that the queue listener does not stop running.</p>
            <h4>Queue Priorities</h4>
            <p>You may pass a comma-delimited list of queue connections to the <code>listen</code> job to set queue priorities:</p>
            <pre><code>php artisan queue:listen --queue=high,low
</code></pre>
            <p>In this example, jobs on the <code>high</code> queue will always be processed before moving onto jobs from the <code>low</code> queue.</p>
            <h4>Specifying The Job Timeout Parameter</h4>
            <p>You may also set the length of time (in seconds) each job should be allowed to run:</p>
            <pre><code>php artisan queue:listen --timeout=60
</code></pre>
            <h4>Specifying Queue Sleep Duration</h4>
            <p>In addition, you may specify the number of seconds to wait before polling for new jobs:</p>
            <pre><code>php artisan queue:listen --sleep=5
</code></pre>
            <p>Note that the queue only &quot;sleeps&quot; if no jobs are on the queue. If more jobs are available, the queue will continue to work them without sleeping.</p>
            <p>
                <a name="supervisor-configuration"></a>
            </p>
            <h3>Supervisor Configuration</h3>
            <p>Supervisor is a process monitor for the Linux operating system, and will automatically restart your <code>queue:listen</code> or <code>queue:work</code> commands if they fail. To install Supervisor on Ubuntu, you may use the following command:</p>
            <pre><code>sudo apt-get install supervisor
</code></pre>
            <p>Supervisor configuration files are typically stored in the <code>/etc/supervisor/conf.d</code> directory. Within this directory, you may create any number of configuration files that instruct supervisor how your processes should be monitored.
                For example, let's create a <code>laravel-worker.conf</code> file that starts and monitors a <code>queue:work</code> process:</p>
            <pre><code>[program:laravel-worker]
process_name=%(program_name)s_%(process_num)02d
command=php /home/forge/app.com/artisan queue:work sqs --sleep=3 --tries=3 --daemon
autostart=true
autorestart=true
user=forge
numprocs=8
redirect_stderr=true
stdout_logfile=/home/forge/app.com/worker.log
</code></pre>
            <p>In this example, the <code>numprocs</code> directive will instruct Supervisor to run 8 <code>queue:work</code> processes and monitor all of them, automatically restarting them if they fail. Of course, you should change the <code>queue:work sqs</code>                portion of the <code>command</code> directive to reflect your chosen queue driver.</p>
            <p>Once the configuration file has been created, you may update the Supervisor configuration and start the processes using the following commands:</p>
            <pre><code>sudo supervisorctl reread

sudo supervisorctl update

sudo supervisorctl start laravel-worker:*
</code></pre>
            <p>For more information on configuring and using Supervisor, consult the <a href="http://supervisord.org/index.html" target="_blank">Supervisor documentation</a>. Alternatively, you may use <a href="https://forge.laravel.com" target="_blank">Laravel Forge</a> to automatically
                configure and manage your Supervisor configuration from a convenient web interface.</p>
            <p>
                <a name="daemon-queue-listener"></a>
            </p>
            <h3>Daemon Queue Listener</h3>
            <p>The <code>queue:work</code> Artisan command includes a <code>--daemon</code> option for forcing the queue worker to continue processing jobs without ever re-booting the framework. This results in a significant reduction of CPU usage when compared
                to the <code>queue:listen</code> command:</p>
            <p>To start a queue worker in daemon mode, use the <code>--daemon</code> flag:</p>
            <pre><code>php artisan queue:work connection --daemon

php artisan queue:work connection --daemon --sleep=3

php artisan queue:work connection --daemon --sleep=3 --tries=3
</code></pre>
            <p>As you can see, the <code>queue:work</code> job supports most of the same options available to <code>queue:listen</code>. You may use the <code>php artisan help queue:work</code> job to view all of the available options.</p>
            <h4>Coding Considerations For Daemon Queue Listeners</h4>
            <p>Daemon queue workers do not restart the framework before processing each job. Therefore, you should be careful to free any heavy resources before your job finishes. For example, if you are doing image manipulation with the GD library, you
                should free the memory with <code>imagedestroy</code> when you are done.</p>
            <p>Similarly, your database connection may disconnect when being used by a long-running daemon. You may use the <code>DB::reconnect</code> method to ensure you have a fresh connection.</p>
            <p>
                <a name="deploying-with-daemon-queue-listeners"></a>
            </p>
            <h3>Deploying With Daemon Queue Listeners</h3>
            <p>Since daemon queue workers are long-lived processes, they will not pick up changes in your code without being restarted. So, the simplest way to deploy an application using daemon queue workers is to restart the workers during your deployment
                script. You may gracefully restart all of the workers by including the following command in your deployment script:</p>
            <pre><code>php artisan queue:restart
</code></pre>
            <p>This command will gracefully instruct all queue workers to restart after they finish processing their current job so that no existing jobs are lost.</p>
            <blockquote>
                <p><strong>Note:</strong> This command relies on the cache system to schedule the restart. By default, APCu does not work for CLI jobs. If you are using APCu, add <code>apc.enable_cli=1</code> to your APCu configuration.</p>
            </blockquote>
            <p>
                <a name="dealing-with-failed-jobs"></a>
            </p>
            <h2>Dealing With Failed Jobs</h2>
            <p>Since things don't always go as planned, sometimes your queued jobs will fail. Don't worry, it happens to the best of us! Laravel includes a convenient way to specify the maximum number of times a job should be attempted. After a job has exceeded
                this amount of attempts, it will be inserted into a <code>failed_jobs</code> table. The name of the table can be configured via the <code>config/queue.php</code> configuration file.</p>
            <p>To create a migration for the <code>failed_jobs</code> table, you may use the <code>queue:failed-table</code> command:</p>
            <pre><code>php artisan queue:failed-table
</code></pre>
            <p>When running your <a href="queues#running-the-queue-listener">queue listener</a>, you may specify the maximum number of times a job should be attempted using the <code>--tries</code> switch on the <code>queue:listen</code> command:</p>
            <pre><code>php artisan queue:listen connection-name --tries=3
</code></pre>
            <p>
                <a name="failed-job-events"></a>
            </p>
            <h3>Failed Job Events</h3>
            <p>If you would like to register an event that will be called when a queued job fails, you may use the <code>Queue::failing</code> method. This event is a great opportunity to notify your team via e-mail or <a href="https://www.hipchat.com" target="_blank">HipChat</a>.
                For example, we may attach a callback to this event from the <code>AppServiceProvider</code> that is included with Laravel:</p>
            <pre><code>&lt;?php

namespace App\Providers;

use Queue;
use Illuminate\Support\ServiceProvider;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Bootstrap any application services.
     *
     * @return void
     */
    public function boot()
    {
        Queue::failing(function ($connection, $job, $data) {
            // Notify team of failing job...
        });
    }

    /**
     * Register the service provider.
     *
     * @return void
     */
    public function register()
    {
        //
    }
}
</code></pre>
            <h4>Failed Method On Job Classes</h4>
            <p>For more granular control, you may define a <code>failed</code> method directly on a queue job class, allowing you to perform job specific actions when a failure occurs:</p>
            <pre><code>&lt;?php

namespace App\Jobs;

use App\Jobs\Job;
use Illuminate\Contracts\Mail\Mailer;
use Illuminate\Queue\SerializesModels;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Contracts\Bus\SelfHandling;
use Illuminate\Contracts\Queue\ShouldQueue;

class SendReminderEmail extends Job implements SelfHandling, ShouldQueue
{
    use InteractsWithQueue, SerializesModels;

    /**
     * Execute the job.
     *
     * @param  Mailer  $mailer
     * @return void
     */
    public function handle(Mailer $mailer)
    {
        //
    }

    /**
     * Handle a job failure.
     *
     * @return void
     */
    public function failed()
    {
        // Called when the job is failing...
    }
}
</code></pre>
            <p>
                <a name="retrying-failed-jobs"></a>
            </p>
            <h3>Retrying Failed Jobs</h3>
            <p>To view all of your failed jobs that have been inserted into your <code>failed_jobs</code> database table, you may use the <code>queue:failed</code> Artisan command:</p>
            <pre><code>php artisan queue:failed
</code></pre>
            <p>The <code>queue:failed</code> command will list the job ID, connection, queue, and failure time. The job ID may be used to retry the failed job. For instance, to retry a failed job that has an ID of 5, the following command should be issued:</p>
            <pre><code>php artisan queue:retry 5
</code></pre>
            <p>To retry all of your failed jobs, use <code>queue:retry</code> with <code>all</code> as the ID:</p>
            <pre><code>php artisan queue:retry all
</code></pre>
            <p>If you would like to delete a failed job, you may use the <code>queue:forget</code> command:</p>
            <pre><code>php artisan queue:forget 5
</code></pre>
            <p>To delete all of your failed jobs, you may use the <code>queue:flush</code> command:</p>
            <pre><code>php artisan queue:flush
</code></pre>

        </article>
    </div>


    <footer class="main">
        <ul>
            <li class="nav-docs"><a href="http://www.golaravel.com/laravel/docs/">中文文档</a>
            </li>
            <li class="nav-community"><a href="http://wenda.golaravel.com" target="_blank">问答社区</a>
            </li>
            <li class="nav-api"><a href="http://laravel.com/api/5.0/" target="_blank">API</a>
            </li>
            <li class="nav-laracasts"><a href="https://laracasts.com" target="_blank">视频教程（国外）</a>
            </li>
            <li class="nav-forge"><a href="https://forge.laravel.com" target="_blank">Forge</a>
            </li>

        </ul>
        <p>Laravel is a trademark of Taylor Otwell. Copyright &copy; Taylor Otwell.</p>
        <p class="less-significant"><a href="http://jackmcdade.com" target="_blank">Design by Jack McDade</a>
        </p>
    </footer>

    <script src="../../assets/js/laravel.js"></script>
    <script src="../../assets/js/viewport-units-buggyfill.js"></script>
    <script>
        window.viewportUnitsBuggyfill.init();
    </script>
    <script type="text/javascript">
        var _bdhmProtocol = (("https:" == document.location.protocol) ? " https://" : " http://");
        document.write(unescape("%3Cscript src='" + _bdhmProtocol + "hm.baidu.com/h.js%3Fc8d13872a523d9c286aa7affbe0921f1' type='text/javascript'%3E%3C/script%3E"));
    </script>
</body>

</html>