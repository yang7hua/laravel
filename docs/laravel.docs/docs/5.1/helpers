<!doctype html>
<html lang="zh-CN">

<head>
    <meta charset="utf-8">
    <title>辅助函数 - Laravel 5.1 中文文档 | Laravel 中文网</title>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta name="author" content="Laravel 中文网">
    <meta name="description" content="Laravel - 为 WEB 艺术家创造的 PHP 框架。| Laravel 中文网">
    <meta name="keywords" content="Laravel中文社区,php框架,laravel中文网,php framework,restful routing,laravel,laravel php">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!--[if lte IE 9]>
		<script src="http://cdn.bootcss.com/html5shiv/3.7.2/html5shiv.min.js"></script>
	<![endif]-->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="../../assets/css/laravel.css">
    <link rel="stylesheet" href="../../assets/css/patch.css">
</head>

<body class="docs language-php">

    <span class="overlay"></span>

    <nav class="main">
        <div class="container">
            <a href="http://www.golaravel.com/laravel/" class="brand">
                <img src="../../assets/img/laravel-logo.png" height="30"> Laravel
            </a>

            <div class="responsive-sidebar-nav">
                <a href="helpers#" class="toggle-slide menu-link btn">&#9776;</a>
            </div>

            <div class="switcher">
                <div class="dropdown">
                    <button class="btn dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-expanded="true">
                        <!--<span class="faint">v</span> -->
                        5.1
                        <span class="caret"></span>
                    </button>
                    <ul class="dropdown-menu" role="menu" aria-labelledby="dropdownMenu1">
                        <li role="presentation">
                            <a role="menuitem" tabindex="-1" href="index.html">5.1</a>
                        </li>
                        <li role="presentation">
                            <a role="menuitem" tabindex="-1" href="http://www.golaravel.com/laravel/docs/5.0">5.0</a>
                        </li>
                        <li role="presentation">
                            <a role="menuitem" tabindex="-1" href="http://www.golaravel.com/laravel/docs/4.2">4.2</a>
                        </li>
                        <li role="presentation">
                            <a role="menuitem" tabindex="-1" href="http://www.golaravel.com/laravel/docs/4.1">4.1</a>
                        </li>
                        <li role="presentation">
                            <a role="menuitem" tabindex="-1" href="http://www.golaravel.com/laravel/docs/4.0">4.0</a>
                        </li>
                    </ul>
                </div>
            </div>

            <ul class="main-nav">
                <li class="nav-docs"><a href="http://www.golaravel.com/laravel/docs/">中文文档</a>
                </li>
                <li class="nav-community"><a href="http://wenda.golaravel.com" target="_blank">问答社区</a>
                </li>
                <li class="nav-api"><a href="http://laravel.com/api/5.0/" target="_blank">API</a>
                </li>
                <li class="nav-laracasts"><a href="https://laracasts.com" target="_blank">视频教程（国外）</a>
                </li>
                <li class="nav-forge"><a href="https://forge.laravel.com" target="_blank">Forge</a>
                </li>

            </ul>
        </div>
    </nav>

    <nav id="slide-menu" class="slide-menu" role="navigation">

        <div class="brand">
            <a href="http://www.golaravel.com/laravel/">
                <img src="../../assets/img/laravel-logo-white.png" height="50">
            </a>
        </div>

        <ul class="slide-main-nav">
            <li><a href="http://www.golaravel.com/laravel/">首页</a>
            </li>
            <li class="nav-docs"><a href="http://www.golaravel.com/laravel/docs/">中文文档</a>
            </li>
            <li class="nav-community"><a href="http://wenda.golaravel.com" target="_blank">问答社区</a>
            </li>
            <li class="nav-api"><a href="http://laravel.com/api/5.0/" target="_blank">API</a>
            </li>
            <li class="nav-laracasts"><a href="https://laracasts.com" target="_blank">视频教程（国外）</a>
            </li>
            <li class="nav-forge"><a href="https://forge.laravel.com" target="_blank">Forge</a>
            </li>

        </ul>

        <div class="slide-docs-nav">
            <h2>文档目录</h2>
            <ul>
                <li>序言
                    <ul>
                        <li><a href="releases">版本说明</a>
                        </li>
                        <li><a href="upgrade">升级指南</a>
                        </li>
                        <li><a href="contributions">贡献指南</a>
                        </li>
                        <li><a href="http://www.golaravel.com/laravel/api/5.1">API 文档</a>
                        </li>
                    </ul>
                </li>
                <li>安装设置
                    <ul>
                        <li><a href="installation">安装</a>
                        </li>
                        <li><a href="homestead">Homestead</a>
                        </li>
                    </ul>
                </li>
                <li>教程
                    <ul>
                        <li><a href="quickstart">入门学习任务</a>
                        </li>
                        <li><a href="quickstart-intermediate">中级学习任务</a>
                        </li>
                    </ul>
                </li>
                <li>基础知识
                    <ul>
                        <li><a href="routing">路由</a>
                        </li>
                        <li><a href="middleware">中间件</a>
                        </li>
                        <li><a href="controllers">控制器</a>
                        </li>
                        <li><a href="requests">请求</a>
                        </li>
                        <li><a href="responses">响应</a>
                        </li>
                        <li><a href="views">视图</a>
                        </li>
                        <li><a href="blade">Blade 模板</a>
                        </li>
                    </ul>
                </li>
                <li>系统架构
                    <ul>
                        <li><a href="lifecycle">请求的生命周期</a>
                        </li>
                        <li><a href="structure">应用程序结构</a>
                        </li>
                        <li><a href="providers">服务提供者</a>
                        </li>
                        <li><a href="container">服务容器</a>
                        </li>
                        <li><a href="contracts">Contract</a>
                        </li>
                        <li><a href="facades">Facade</a>
                        </li>
                    </ul>
                </li>
                <li>系统服务
                    <ul>
                        <li><a href="authentication">认证</a>
                        </li>
                        <li><a href="authorization">授权</a>
                        </li>
                        <li><a href="artisan">Artisan 控制台</a>
                        </li>
                        <li><a href="billing">计费</a>
                        </li>
                        <li><a href="cache">缓存</a>
                        </li>
                        <li><a href="collections">集合</a>
                        </li>
                        <li><a href="elixir">Elixir</a>
                        </li>
                        <li><a href="encryption">加密</a>
                        </li>
                        <li><a href="errors">错误与日志</a>
                        </li>
                        <li><a href="events">事件</a>
                        </li>
                        <li><a href="filesystem">文件系统 / 云存储</a>
                        </li>
                        <li><a href="hashing">哈希</a>
                        </li>
                        <li><a href="helpers">辅助方法</a>
                        </li>
                        <li><a href="localization">本地化</a>
                        </li>
                        <li><a href="mail">邮件</a>
                        </li>
                        <li><a href="packages">扩展包开发</a>
                        </li>
                        <li><a href="pagination">分页</a>
                        </li>
                        <li><a href="queues">队列</a>
                        </li>
                        <li><a href="redis">Redis</a>
                        </li>
                        <li><a href="session">会话</a>
                        </li>
                        <li><a href="envoy">SSH 任务</a>
                        </li>
                        <li><a href="scheduling">任务调度</a>
                        </li>
                        <li><a href="testing">测试</a>
                        </li>
                        <li><a href="validation">验证</a>
                        </li>
                    </ul>
                </li>
                <li>数据库
                    <ul>
                        <li><a href="database">入门</a>
                        </li>
                        <li><a href="queries">查询构造器</a>
                        </li>
                        <li><a href="migrations">迁移</a>
                        </li>
                        <li><a href="seeding">数据填充</a>
                        </li>
                    </ul>
                </li>
                <li>Eloquent ORM
                    <ul>
                        <li><a href="eloquent">入门</a>
                        </li>
                        <li><a href="eloquent-relationships">关系</a>
                        </li>
                        <li><a href="eloquent-collections">集合</a>
                        </li>
                        <li><a href="eloquent-mutators">调整修改</a>
                        </li>
                        <li><a href="eloquent-serialization">序列化</a>
                        </li>
                    </ul>
                </li>
            </ul>

        </div>

    </nav>

    <div class="docs-wrapper container">

        <section class="sidebar">
            <ul>
                <li>序言
                    <ul>
                        <li><a href="releases">版本说明</a>
                        </li>
                        <li><a href="upgrade">升级指南</a>
                        </li>
                        <li><a href="contributions">贡献指南</a>
                        </li>
                        <li><a href="http://www.golaravel.com/laravel/api/5.1">API 文档</a>
                        </li>
                    </ul>
                </li>
                <li>安装设置
                    <ul>
                        <li><a href="installation">安装</a>
                        </li>
                        <li><a href="homestead">Homestead</a>
                        </li>
                    </ul>
                </li>
                <li>教程
                    <ul>
                        <li><a href="quickstart">入门学习任务</a>
                        </li>
                        <li><a href="quickstart-intermediate">中级学习任务</a>
                        </li>
                    </ul>
                </li>
                <li>基础知识
                    <ul>
                        <li><a href="routing">路由</a>
                        </li>
                        <li><a href="middleware">中间件</a>
                        </li>
                        <li><a href="controllers">控制器</a>
                        </li>
                        <li><a href="requests">请求</a>
                        </li>
                        <li><a href="responses">响应</a>
                        </li>
                        <li><a href="views">视图</a>
                        </li>
                        <li><a href="blade">Blade 模板</a>
                        </li>
                    </ul>
                </li>
                <li>系统架构
                    <ul>
                        <li><a href="lifecycle">请求的生命周期</a>
                        </li>
                        <li><a href="structure">应用程序结构</a>
                        </li>
                        <li><a href="providers">服务提供者</a>
                        </li>
                        <li><a href="container">服务容器</a>
                        </li>
                        <li><a href="contracts">Contract</a>
                        </li>
                        <li><a href="facades">Facade</a>
                        </li>
                    </ul>
                </li>
                <li>系统服务
                    <ul>
                        <li><a href="authentication">认证</a>
                        </li>
                        <li><a href="authorization">授权</a>
                        </li>
                        <li><a href="artisan">Artisan 控制台</a>
                        </li>
                        <li><a href="billing">计费</a>
                        </li>
                        <li><a href="cache">缓存</a>
                        </li>
                        <li><a href="collections">集合</a>
                        </li>
                        <li><a href="elixir">Elixir</a>
                        </li>
                        <li><a href="encryption">加密</a>
                        </li>
                        <li><a href="errors">错误与日志</a>
                        </li>
                        <li><a href="events">事件</a>
                        </li>
                        <li><a href="filesystem">文件系统 / 云存储</a>
                        </li>
                        <li><a href="hashing">哈希</a>
                        </li>
                        <li><a href="helpers">辅助方法</a>
                        </li>
                        <li><a href="localization">本地化</a>
                        </li>
                        <li><a href="mail">邮件</a>
                        </li>
                        <li><a href="packages">扩展包开发</a>
                        </li>
                        <li><a href="pagination">分页</a>
                        </li>
                        <li><a href="queues">队列</a>
                        </li>
                        <li><a href="redis">Redis</a>
                        </li>
                        <li><a href="session">会话</a>
                        </li>
                        <li><a href="envoy">SSH 任务</a>
                        </li>
                        <li><a href="scheduling">任务调度</a>
                        </li>
                        <li><a href="testing">测试</a>
                        </li>
                        <li><a href="validation">验证</a>
                        </li>
                    </ul>
                </li>
                <li>数据库
                    <ul>
                        <li><a href="database">入门</a>
                        </li>
                        <li><a href="queries">查询构造器</a>
                        </li>
                        <li><a href="migrations">迁移</a>
                        </li>
                        <li><a href="seeding">数据填充</a>
                        </li>
                    </ul>
                </li>
                <li>Eloquent ORM
                    <ul>
                        <li><a href="eloquent">入门</a>
                        </li>
                        <li><a href="eloquent-relationships">关系</a>
                        </li>
                        <li><a href="eloquent-collections">集合</a>
                        </li>
                        <li><a href="eloquent-mutators">调整修改</a>
                        </li>
                        <li><a href="eloquent-serialization">序列化</a>
                        </li>
                    </ul>
                </li>
            </ul>

        </section>

        <article>
            <h1>辅助函数</h1>
            <ul>
                <li><a href="helpers#introduction">简介</a>
                </li>
                <li><a href="helpers#available-methods">现有方法</a>
                </li>
            </ul>
            <p>
                <a name="introduction"></a>
            </p>
            <h2>简介</h2>
            <p>Laravel包含许多PHP辅助函数。框架自身使用了许多这些函数；不过，如果觉得方便，也可以自由地在你的应用中使用它们。</p>
            <p>
                <a name="available-methods"></a>
            </p>
            <h2>现有方法</h2>
            <style>
                .collection-method-list > p {
                    column-count: 3;
                    -moz-column-count: 3;
                    -webkit-column-count: 3;
                    column-gap: 2em;
                    -moz-column-gap: 2em;
                    -webkit-column-gap: 2em;
                }
                <pre><code>.collection-method-list a {
                    display: block;
                }
                </code></pre>
            </style>
            <h3>数组</h3>
            <div class="collection-method-list" markdown="1">
                [array_add](#method-array-add) [array_collapse](#method-array-collapse) [array_divide](#method-array-divide) [array_dot](#method-array-dot) [array_except](#method-array-except) [array_first](#method-array-first) [array_flatten](#method-array-flatten)
                [array_forget](#method-array-forget) [array_get](#method-array-get) [array_has](#method-array-has) [array_only](#method-array-only) [array_pluck](#method-array-pluck) [array_pull](#method-array-pull) [array_set](#method-array-set) [array_sort](#method-array-sort)
                [array_sort_recursive](#method-array-sort-recursive) [array_where](#method-array-where) [head](#method-head) [last](#method-last)
            </div>
            <h3>路径</h3>
            <div class="collection-method-list" markdown="1">
                [app_path](#method-app-path) [base_path](#method-base-path) [config_path](#method-config-path) [database_path](#method-database-path) [elixir](#method-elixir) [public_path](#method-public-path) [storage_path](#method-storage-path)
            </div>
            <h3>字串</h3>
            <div class="collection-method-list" markdown="1">
                [camel_case](#method-camel-case) [class_basename](#method-class-basename) [e](#method-e) [ends_with](#method-ends-with) [snake_case](#method-snake-case) [str_limit](#method-str-limit) [starts_with](#method-starts-with) [str_contains](#method-str-contains)
                [str_finish](#method-str-finish) [str_is](#method-str-is) [str_plural](#method-str-plural) [str_random](#method-str-random) [str_singular](#method-str-singular) [str_slug](#method-str-slug) [studly_case](#method-studly-case) [trans](#method-trans)
                [trans_choice](#method-trans-choice)
            </div>
            <h3>URL</h3>
            <div class="collection-method-list" markdown="1">
                [action](#method-action) [asset](#method-asset) [secure_asset](#method-secure-asset) [route](#method-route) [url](#method-url)
            </div>
            <h3>其他</h3>
            <div class="collection-method-list" markdown="1">
                [auth](#method-auth) [back](#method-back) [bcrypt](#method-bcrypt) [collect](#method-collect) [config](#method-config) [csrf_field](#method-csrf-field) [csrf_token](#method-csrf-token) [dd](#method-dd) [env](#method-env) [event](#method-event) [factory](#method-factory)
                [method_field](#method-method-field) [old](#method-old) [redirect](#method-redirect) [request](#method-request) [response](#method-response) [session](#method-session) [value](#method-value) [view](#method-view) [with](#method-with)
            </div>
            <p>
                <a name="method-listing"></a>
            </p>
            <h2>方法列表</h2>
            <style>
                #collection-method code {
                    font-size: 14px;
                }
                <pre><code>#collection-method:not(.first-collection-method) {
                    margin-top: 50px;
                }
                </code></pre>
            </style>
            <p>
                <a name="arrays"></a>
            </p>
            <h2>数组</h2>
            <p>
                <a name="method-array-add"></a>
            </p>
            <h4><code>array_add()</code> {#collection-method .first-collection-method}</h4>
            <p><code>array_add</code> 函数向数组中添加一个键-值对（如果给定的键不存在）：</p>
            <pre><code>$array = array_add(['name' =&gt; 'Desk'], 'price', 100);

// ['name' =&gt; 'Desk', 'price' =&gt; 100]
</code></pre>
            <p>
                <a name="method-array-collapse"></a>
            </p>
            <h4><code>array_collapse()</code> {#collection-method}</h4>
            <p>The <code>array_collapse</code> function collapse an array of arrays into a single array:</p>
            <pre><code>$array = array_collapse([[1, 2, 3], [4, 5, 6], [7, 8, 9]]);

// [1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>
            <p>
                <a name="method-array-divide"></a>
            </p>
            <h4><code>array_divide()</code> {#collection-method}</h4>
            <p><code>array_divide</code> 返回两个数组，一个包含原数组的所有键，另一个包含原数组的所有值：</p>
            <pre><code>list($keys, $values) = array_divide(['name' =&gt; 'Desk']);

// $keys: ['name']

// $values: ['Desk']
</code></pre>
            <p>
                <a name="method-array-dot"></a>
            </p>
            <h4><code>array_dot()</code> {#collection-method}</h4>
            <p><code>array_dot</code> 函数将一个多维数组转换为一维数组，并使用点号指示深度：</p>
            <pre><code>$array = array_dot(['foo' =&gt; ['bar' =&gt; 'baz']]);

// ['foo.bar' =&gt; 'baz'];
</code></pre>
            <p>
                <a name="method-array-except"></a>
            </p>
            <h4><code>array_except()</code> {#collection-method}</h4>
            <p><code>array_except</code> 方法从一个数组中移除指定的键/值对：</p>
            <pre><code>$array = ['name' =&gt; 'Desk', 'price' =&gt; 100];

$array = array_except($array, ['price']);

// ['name' =&gt; 'Desk']
</code></pre>
            <p>
                <a name="method-array-first"></a>
            </p>
            <h4><code>array_first()</code> {#collection-method}</h4>
            <p><code>array_first</code> 方法返回数组中第一个通过判断返回为真的元素：</p>
            <pre><code>$array = [100, 200, 300];

$value = array_first($array, function ($key, $value) {
    return $value &gt;= 150;
});

// 200
</code></pre>
            <p>默认值可作为第三个参数传入。如果没有值通过判断，将返回默认值：</p>
            <pre><code>$value = array_first($array, $callback, $default);
</code></pre>
            <p>
                <a name="method-array-flatten"></a>
            </p>
            <h4><code>array_flatten()</code> {#collection-method}</h4>
            <p><code>array_flatten</code> 方法将一个多维数组转换为一维数组：</p>
            <pre><code>$array = ['name' =&gt; 'Joe', 'languages' =&gt; ['PHP', 'Ruby']];

$array = array_flatten($array);

// ['Joe', 'PHP', 'Ruby'];
</code></pre>
            <p>
                <a name="method-array-forget"></a>
            </p>
            <h4><code>array_forget()</code> {#collection-method}</h4>
            <p><code>array_forget</code> 方法基于点号路径从一个深度嵌套的数组中移除指定的键/值对：</p>
            <pre><code>$array = ['products' =&gt; ['desk' =&gt; ['price' =&gt; 100]]];

array_forget($array, 'products.desk');

// ['products' =&gt; []]
</code></pre>
            <p>
                <a name="method-array-get"></a>
            </p>
            <h4><code>array_get()</code> {#collection-method}</h4>
            <p><code>array_get</code> 方法基于点号路径从一个深度嵌套的数组中取出值：</p>
            <pre><code>$array = ['products' =&gt; ['desk' =&gt; ['price' =&gt; 100]]];

$value = array_get($array, 'products.desk');

// ['price' =&gt; 100]
</code></pre>
            <p><code>array_get</code> 方法也接受默认值，如果指定的键未找到，返回默认值：</p>
            <pre><code>$value = array_get($array, 'names.john', 'default');
</code></pre>
            <p>
                <a name="method-array-has"></a>
            </p>
            <h4><code>array_has()</code> {#collection-method}</h4>
            <p>The <code>array_has</code> function checks that a given item exists in an array using &quot;dot&quot; notation:</p>
            <pre><code>$array = ['products' =&gt; ['desk' =&gt; ['price' =&gt; 100]]];

$hasDesk = array_has($array, ['products.desk']);

// true
</code></pre>
            <p>
                <a name="method-array-only"></a>
            </p>
            <h4><code>array_only()</code> {#collection-method}</h4>
            <p><code>array_only</code> 方法从给定的数组中返回指定的键/值对：</p>
            <pre><code>$array = ['name' =&gt; 'Desk', 'price' =&gt; 100, 'orders' =&gt; 10];

$array = array_only($array, ['name', 'price']);

// ['name' =&gt; 'Desk', 'price' =&gt; 100]
</code></pre>
            <p>
                <a name="method-array-pluck"></a>
            </p>
            <h4><code>array_pluck()</code> {#collection-method}</h4>
            <p><code>array_pluck</code> 方法从给定的数组中提取出键/值对：</p>
            <pre><code>$array = [
    ['developer' =&gt; ['id' =&gt; 1, 'name' =&gt; 'Taylor']],
    ['developer' =&gt; ['id' =&gt; 2, 'name' =&gt; 'Abigail']],
];

$array = array_pluck($array, 'developer.name');

// ['Taylor', 'Abigail'];
</code></pre>
            <p>You may also specify how you wish the resulting list to be keyed:</p>
            <pre><code>$array = array_pluck($array, 'developer.name', 'developer.id');

// [1 =&gt; 'Taylor', 2 =&gt; 'Abigail'];
</code></pre>
            <p>
                <a name="method-array-pull"></a>
            </p>
            <h4><code>array_pull()</code> {#collection-method}</h4>
            <p><code>array_pull</code> 方法从数组中移除并返回一个键/值对：</p>
            <pre><code>$array = ['name' =&gt; 'Desk', 'price' =&gt; 100];

$name = array_pull($array, 'name');

// $name: Desk

// $array: ['price' =&gt; 100]
</code></pre>
            <p>
                <a name="method-array-set"></a>
            </p>
            <h4><code>array_set()</code> {#collection-method}</h4>
            <p><code>array_set</code> 方法基于点号路径为一个深度嵌套的数组设置值：</p>
            <pre><code>$array = ['products' =&gt; ['desk' =&gt; ['price' =&gt; 100]]];

array_set($array, 'products.desk.price', 200);

// ['products' =&gt; ['desk' =&gt; ['price' =&gt; 200]]]
</code></pre>
            <p>
                <a name="method-array-sort"></a>
            </p>
            <h4><code>array_sort()</code> {#collection-method}</h4>
            <p><code>array_sort</code> 方法依据给定闭包的返回值排序数组：</p>
            <pre><code>$array = [
    ['name' =&gt; 'Desk'],
    ['name' =&gt; 'Chair'],
];

$array = array_values(array_sort($array, function ($value) {
    return $value['name'];
}));

/*
    [
        ['name' =&gt; 'Chair'],
        ['name' =&gt; 'Desk'],
    ]
*/
</code></pre>
            <p>
                <a name="method-array-sort-recursive"></a>
            </p>
            <h4><code>array_sort_recursive()</code> {#collection-method}</h4>
            <p><code>array_sort_recursive</code> 方法用 <code>sort</code> 函数递归排序数组：</p>
            <pre><code>$array = [
    [
        'Roman',
        'Taylor',
        'Li',
    ],
    [
        'PHP',
        'Ruby',
        'JavaScript',
    ],
];

$array = array_sort_recursive($array);

/*
    [
        [
            'Li',
            'Roman',
            'Taylor',
        ],
        [
            'JavaScript',
            'PHP',
            'Ruby',
        ]
    ];
*/
</code></pre>
            <p>
                <a name="method-array-where"></a>
            </p>
            <h4><code>array_where()</code> {#collection-method}</h4>
            <p><code>array_where</code> 用给定闭包过滤数组：</p>
            <pre><code>$array = [100, '200', 300, '400', 500];

$array = array_where($array, function ($key, $value) {
    return is_string($value);
});

// [1 =&gt; 200, 3 =&gt; 400]
</code></pre>
            <p>
                <a name="method-head"></a>
            </p>
            <h4><code>head()</code> {#collection-method}</h4>
            <p><code>head</code> 函数简单返回给定数组的第一个元素：</p>
            <pre><code>$array = [100, 200, 300];

$first = head($array);

// 100
</code></pre>
            <p>
                <a name="method-last"></a>
            </p>
            <h4><code>last()</code> {#collection-method}</h4>
            <p><code>last</code> 函数返回给定数组的最后一个元素：</p>
            <pre><code>$array = [100, 200, 300];

$last = last($array);

// 300
</code></pre>
            <p>
                <a name="paths"></a>
            </p>
            <h2>路径</h2>
            <p>
                <a name="method-app-path"></a>
            </p>
            <h4><code>app_path()</code> {#collection-method}</h4>
            <p><code>app_path</code> 函数返回 <code>app</code> 目录的绝对路径：</p>
            <pre><code>$path = app_path();
</code></pre>
            <p>你也可以用 <code>app_path</code> 函数来生成相对于应用目录的文件的绝对路径：</p>
            <pre><code>$path = app_path('Http/Controllers/Controller.php');
</code></pre>
            <p>
                <a name="method-base-path"></a>
            </p>
            <h4><code>base_path()</code> {#collection-method}</h4>
            <p><code>base_path</code> 返回项目根目录的绝对路径：</p>
            <pre><code>$path = base_path();
</code></pre>
            <p>你也可以用 <code>base_path</code> 函数来生成相对于应用目录的文件的绝对路径：</p>
            <pre><code>$path = base_path('vendor/bin');
</code></pre>
            <p>
                <a name="method-config-path"></a>
            </p>
            <h4><code>config_path()</code> {#collection-method}</h4>
            <p><code>config_path</code> 函数返回应用配置目录的绝对路径：</p>
            <pre><code>$path = config_path();
</code></pre>
            <p>
                <a name="method-database-path"></a>
            </p>
            <h4><code>database_path()</code> {#collection-method}</h4>
            <p><code>database_path</code> 函数返回应用数据库目录的绝对路径：</p>
            <pre><code>$path = database_path();
</code></pre>
            <p>
                <a name="method-elixir"></a>
            </p>
            <h4><code>elixir()</code> {#collection-method}</h4>
            <p>The <code>elixir</code> function gets the path to the versioned <a href="elixir">Elixir</a> file:</p>
            <pre><code>elixir($file);
</code></pre>
            <p>
                <a name="method-public-path"></a>
            </p>
            <h4><code>public_path()</code> {#collection-method}</h4>
            <p><code>public_path</code> 函数返回 <code>public</code> 目录的绝对路径： function returns the fully qualified path to the <code>public</code> directory:</p>
            <pre><code>$path = public_path();
</code></pre>
            <p>
                <a name="method-storage-path"></a>
            </p>
            <h4><code>storage_path()</code> {#collection-method}</h4>
            <p><code>storage_path</code> 函数返回 <code>storage</code> 目录的绝对路径： function returns the fully qualified path to the <code>storage</code> directory:</p>
            <pre><code>$path = storage_path();
</code></pre>
            <p>你也可以用 <code>storage_path</code> 函数来生成相对于storage目录的文件的绝对路径：</p>
            <pre><code>$path = storage_path('app/file.txt');
</code></pre>
            <p>
                <a name="strings"></a>
            </p>
            <h2>字串</h2>
            <p>
                <a name="method-camel-case"></a>
            </p>
            <h4><code>camel_case()</code> {#collection-method}</h4>
            <p><code>camel_case</code> 函数将给定字串转换为驼峰式：</p>
            <pre><code>$camel = camel_case('foo_bar');

// fooBar
</code></pre>
            <p>
                <a name="method-class-basename"></a>
            </p>
            <h4><code>class_basename()</code> {#collection-method}</h4>
            <p><code>class_basename</code> 返回删除了名字空间的类名：</p>
            <pre><code>$class = class_basename('Foo\Bar\Baz');

// Baz
</code></pre>
            <p>
                <a name="method-e"></a>
            </p>
            <h4><code>e()</code> {#collection-method}</h4>
            <p><code>e</code> 函数为给定的字串调用 <code>htmlentities</code> ：</p>
            <pre><code>echo e('&lt;html&gt;foo&lt;/html&gt;');

// &amp;lt;html&amp;gt;foo&amp;lt;/html&amp;gt;
</code></pre>
            <p>
                <a name="method-ends-with"></a>
            </p>
            <h4><code>ends_with()</code> {#collection-method}</h4>
            <p><code>ends_with</code> 函数判断字串是否以给定值结尾：</p>
            <pre><code>$value = ends_with('This is my name', 'name');

// true
</code></pre>
            <p>
                <a name="method-snake-case"></a>
            </p>
            <h4><code>snake_case()</code> {#collection-method}</h4>
            <p><code>snake_case</code> 将给定字串转换为蛇形式：</p>
            <pre><code>$snake = snake_case('fooBar');

// foo_bar
</code></pre>
            <p>
                <a name="method-str-limit"></a>
            </p>
            <h4><code>str_limit()</code> {#collection-method}</h4>
            <p><code>str_limit</code> 函数限制一个字符串的长度。该函数接收一个字符串作为第一个参数，最大长度作为第二个参数：</p>
            <pre><code>$value = str_limit('The PHP framework for web artisans.', 7);

// The PHP...
</code></pre>
            <p>
                <a name="method-starts-with"></a>
            </p>
            <h4><code>starts_with()</code> {#collection-method}</h4>
            <p><code>starts_with</code> 函数判断字串是否以给定值开头：</p>
            <pre><code>$value = starts_with('This is my name', 'This');

// true
</code></pre>
            <p>
                <a name="method-str-contains"></a>
            </p>
            <h4><code>str_contains()</code> {#collection-method}</h4>
            <p><code>str_contains</code> 判断字串是否包含给定值：</p>
            <pre><code>$value = str_contains('This is my name', 'my');

// true
</code></pre>
            <p>
                <a name="method-str-finish"></a>
            </p>
            <h4><code>str_finish()</code> {#collection-method}</h4>
            <p><code>str_finish</code> 函数为字串添加给定单例：</p>
            <pre><code>$string = str_finish('this/string', '/');

// this/string/
</code></pre>
            <p>
                <a name="method-str-is"></a>
            </p>
            <h4><code>str_is()</code> {#collection-method}</h4>
            <p><code>str_is</code> 函数判断字串是否匹配给定形式。星号表示通配符：</p>
            <pre><code>$value = str_is('foo*', 'foobar');

// true

$value = str_is('baz*', 'foobar');

// false
</code></pre>
            <p>
                <a name="method-str-plural"></a>
            </p>
            <h4><code>str_plural()</code> {#collection-method}</h4>
            <p><code>str_plural</code> 函数将字串转换为其复数形式。该函数目前仅支持英文：</p>
            <pre><code>$plural = str_plural('car');

// cars

$plural = str_plural('child');

// children
</code></pre>
            <p>You may provide an integer as a second argument to the function to retrieve the singular or plural form of the string:</p>
            <pre><code>$plural = str_plural('child', 2);

// children

$plural = str_plural('child', 1);

// child
</code></pre>
            <p>
                <a name="method-str-random"></a>
            </p>
            <h4><code>str_random()</code> {#collection-method}</h4>
            <p><code>str_random</code> 函数生成指定长度的随机字符串：</p>
            <pre><code>$string = str_random(40);
</code></pre>
            <p>
                <a name="method-str-singular"></a>
            </p>
            <h4><code>str_singular()</code> {#collection-method}</h4>
            <p><code>str_singular</code> 函数将字串转换为其单数形式。该函数目前仅支持英文：</p>
            <pre><code>$singular = str_singular('cars');

// car
</code></pre>
            <p>
                <a name="method-str-slug"></a>
            </p>
            <h4><code>str_slug()</code> {#collection-method}</h4>
            <p><code>str_slug</code> 函数将字串转换为URL友好型： function generates a URL friendly &quot;slug&quot; from the given string:</p>
            <pre><code>$title = str_slug(&quot;Laravel 5 Framework&quot;, &quot;-&quot;);

// laravel-5-framework
</code></pre>
            <p>
                <a name="method-studly-case"></a>
            </p>
            <h4><code>studly_case()</code> {#collection-method}</h4>
            <p><code>studly_case</code> 函数将字串转换为 <code>StudlyCase</code> 型：</p>
            <pre><code>$value = studly_case('foo_bar');

// FooBar
</code></pre>
            <p>
                <a name="method-trans"></a>
            </p>
            <h4><code>trans()</code> {#collection-method}</h4>
            <p><code>trans</code> 函数使用你的 <a href="localization">本地化文件</a> 翻译给定的语句：</p>
            <pre><code>echo trans('validation.required'):
</code></pre>
            <p>
                <a name="method-trans-choice"></a>
            </p>
            <h4><code>trans_choice()</code> {#collection-method}</h4>
            <p><code>trans_choice</code> 函数随词形变化翻译给定的语句：</p>
            <pre><code>$value = trans_choice('foo.bar', $count);
</code></pre>
            <p>
                <a name="urls"></a>
            </p>
            <h2>URL</h2>
            <p>
                <a name="method-action"></a>
            </p>
            <h4><code>action()</code> {#collection-method}</h4>
            <p><code>action</code> 函数为给定控制器动作生成URL。无需给控制器传入完整的名字空间。相反，传入相对于 <code>App\Http\Controllers</code> 名字空间的控制器类名：</p>
            <pre><code>$url = action('HomeController@getIndex');
</code></pre>
            <p>如果方法接收路由参数，可以将它们作为第二个参数传入该函数：</p>
            <pre><code>$url = action('UserController@profile', ['id' =&gt; 1]);
</code></pre>
            <p>
                <a name="method-asset"></a>
            </p>
            <h4><code>asset()</code> {#collection-method}</h4>
            <p>Generate a URL for an asset using the current scheme of the request (HTTP or HTTPS):</p>
            <pre><code>$url = asset('img/photo.jpg');
</code></pre>
            <p>
                <a name="method-secure-asset"></a>
            </p>
            <h4><code>secure_asset()</code> {#collection-method}</h4>
            <p>Generate a URL for an asset using HTTPS:</p>
            <pre><code>echo secure_asset('foo/bar.zip', $title, $attributes = []);
</code></pre>
            <p>
                <a name="method-route"></a>
            </p>
            <h4><code>route()</code> {#collection-method}</h4>
            <p><code>route</code> 函数为给定名称的路由生成URL：</p>
            <pre><code>$url = route('routeName');
</code></pre>
            <p>如果路由接收参数，可以将它们作为第二个参数传入该函数：</p>
            <pre><code>$url = route('routeName', ['id' =&gt; 1]);
</code></pre>
            <p>
                <a name="method-url"></a>
            </p>
            <h4><code>url()</code> {#collection-method}</h4>
            <p><code>url</code> 函数为给定路径生成绝对URL：</p>
            <pre><code>echo url('user/profile');

echo url('user/profile', [1]);
</code></pre>
            <p>
                <a name="miscellaneous"></a>
            </p>
            <h2>其他</h2>
            <p>
                <a name="method-auth"></a>
            </p>
            <h4><code>auth()</code> {#collection-method}</h4>
            <p><code>auth</code> 函数返回一个认正器实例。可用来简化使用 <code>Auth</code> facade：</p>
            <pre><code>$user = auth()-&gt;user();
</code></pre>
            <p>
                <a name="method-back"></a>
            </p>
            <h4><code>back()</code> {#collection-method}</h4>
            <p><code>back()</code> 函数为用户的前一个位置生成一个重定向响应：</p>
            <pre><code>return back();
</code></pre>
            <p>
                <a name="method-bcrypt"></a>
            </p>
            <h4><code>bcrypt()</code> {#collection-method}</h4>
            <p><code>bcrypt</code> 函数使用Bcrypt计算给定值的哈希值。可用来替换使用 <code>Hash</code> 门面：</p>
            <pre><code>$password = bcrypt('my-secret-password');
</code></pre>
            <p>
                <a name="method-collect"></a>
            </p>
            <h4><code>collect()</code> {#collection-method}</h4>
            <p>The <code>collect</code> function creates a <a href="collections">collection</a> instance from the supplied items:</p>
            <pre><code>$collection = collect(['taylor', 'abigail']);
</code></pre>
            <p>
                <a name="method-config"></a>
            </p>
            <h4><code>config()</code> {#collection-method}</h4>
            <p><code>config</code> 函数获取配置变量的值。可用点号语法（包含文件名和你希望访问的选项）访问配置值。必须指定默认值，它将在配置项不存在时返回：</p>
            <pre><code>$value = config('app.timezone');

$value = config('app.timezone', $default);
</code></pre>
            <p>The <code>config</code> helper may also be used to set configuration variables at runtime by passing an array of key / value pairs:</p>
            <pre><code>config(['app.debug' =&gt; true]);
</code></pre>
            <p>
                <a name="method-csrf-field"></a>
            </p>
            <h4><code>csrf_field()</code> {#collection-method}</h4>
            <p><code>csrf_field</code> 生成一个包含CSRF令牌的HTML隐藏 <code>input</code> 。例如，使用 <a href="blade">Blade 语法</a>:</p>
            <pre><code>{!! csrf_field() !!}
</code></pre>
            <p>
                <a name="method-csrf-token"></a>
            </p>
            <h4><code>csrf_token()</code> {#collection-method}</h4>
            <p><code>csrf_token</code> 函数取回当前CSRF令牌值：</p>
            <pre><code>$token = csrf_token();
</code></pre>
            <p>
                <a name="method-dd"></a>
            </p>
            <h4><code>dd()</code> {#collection-method}</h4>
            <p><code>dd</code> 函数输出给定变量然后结束脚本的执行：</p>
            <pre><code>dd($value);
</code></pre>
            <p>
                <a name="method-env"></a>
            </p>
            <h4><code>env()</code> {#collection-method}</h4>
            <p><code>env</code> 函数获取一个环境变量的值或者返回默认值：</p>
            <pre><code>$env = env('APP_ENV');

// 如果变量不存在，返回默认值
$env = env('APP_ENV', 'production');
</code></pre>
            <p>
                <a name="method-event"></a>
            </p>
            <h4><code>event()</code> {#collection-method}</h4>
            <p><code>event</code> 函数分派给定的 <a href="events">event</a> 到其监听器：</p>
            <pre><code>event(new UserRegistered($user));
</code></pre>
            <p>
                <a name="method-factory"></a>
            </p>
            <h4><code>factory()</code> {#collection-method}</h4>
            <p><code>factory</code> 函数为给定类创建一个模型工厂。当在 <a href="testing#model-factories">testing</a> 或 <a href="seeding#using-model-factories">seeding</a> 时可使用:</p>
            <pre><code>$user = factory(App\User::class)-&gt;make();
</code></pre>
            <p>
                <a name="method-method-field"></a>
            </p>
            <h4><code>method_field()</code> {#collection-method}</h4>
            <p><code>method_field</code> 函数生成一个包含表单HTTP谓词假值的HTML <code>hidden</code> input域。例如，使用 <a href="blade">Blade 语法</a>:</p>
            <pre><code>&lt;form method=&quot;POST&quot;&gt;
    {!! method_field('delete') !!}
&lt;/form&gt;
</code></pre>
            <p>
                <a name="method-old"></a>
            </p>
            <h4><code>old()</code> {#collection-method}</h4>
            <p><code>old</code> 函数用于 <a href="requests#retrieving-input">取回</a> 一个闪存入 session 的旧输入值：</p>
            <pre><code>$value = old('value');
</code></pre>
            <p>
                <a name="method-redirect"></a>
            </p>
            <h4><code>redirect()</code> {#collection-method}</h4>
            <p><code>redirect</code> 函数返回一个重定向器的实例来进行 <a href="responses#redirects">重定向</a>:</p>
            <pre><code>return redirect('/home');
</code></pre>
            <p>
                <a name="method-request"></a>
            </p>
            <h4><code>request()</code> {#collection-method}</h4>
            <p>The <code>request</code> function returns the current <a href="requests">request</a> instance or obtains an input item:</p>
            <pre><code>$request = request();

$value = request('key', $default = null)
</code></pre>
            <p>
                <a name="method-response"></a>
            </p>
            <h4><code>response()</code> {#collection-method}</h4>
            <p><code>response</code> 函数创建一个 <a href="responses">响应</a> 实例或者从响应工厂取得一个实例：</p>
            <pre><code>return response('Hello World', 200, $headers);

return response()-&gt;json(['foo' =&gt; 'bar'], 200, $headers);
</code></pre>
            <p>
                <a name="method-session"></a>
            </p>
            <h4><code>session()</code> {#collection-method}</h4>
            <p>The <code>session</code> function may be used to get / set a session value:</p>
            <pre><code>$value = session('key');
</code></pre>
            <p>You may set values by passing an array of key / value pairs to the function:</p>
            <pre><code>session(['chairs' =&gt; 7, 'instruments' =&gt; 3]);
</code></pre>
            <p>The session store will be returned if no value is passed to the function:</p>
            <pre><code>$value = session()-&gt;get('key');

session()-&gt;put('key', $value);
</code></pre>
            <p>
                <a name="method-value"></a>
            </p>
            <h4><code>value()</code> {#collection-method}</h4>
            <p><code>value</code> 函数将简单地返回你给它的值。然后，如果为它传入一个 <code>Closure</code> ，<code>Closure</code> 将被执行然后返回它的结果：</p>
            <pre><code>$value = value(function() { return 'bar'; });
</code></pre>
            <p>
                <a name="method-view"></a>
            </p>
            <h4><code>view()</code> {#collection-method}</h4>
            <p><code>view</code> 函数取回一个 <a href="views">视图</a> 实例：</p>
            <pre><code>return view('auth.login');
</code></pre>
            <p>
                <a name="method-with"></a>
            </p>
            <h4><code>with()</code> {#collection-method}</h4>
            <p><code>with</code> 函数返回你给它的值。这个函数主要对本不可能的链式操作十分有用。</p>
            <pre><code>$value = with(new Foo)-&gt;work();
</code></pre>

        </article>
    </div>


    <footer class="main">
        <ul>
            <li class="nav-docs"><a href="http://www.golaravel.com/laravel/docs/">中文文档</a>
            </li>
            <li class="nav-community"><a href="http://wenda.golaravel.com" target="_blank">问答社区</a>
            </li>
            <li class="nav-api"><a href="http://laravel.com/api/5.0/" target="_blank">API</a>
            </li>
            <li class="nav-laracasts"><a href="https://laracasts.com" target="_blank">视频教程（国外）</a>
            </li>
            <li class="nav-forge"><a href="https://forge.laravel.com" target="_blank">Forge</a>
            </li>

        </ul>
        <p>Laravel is a trademark of Taylor Otwell. Copyright &copy; Taylor Otwell.</p>
        <p class="less-significant"><a href="http://jackmcdade.com" target="_blank">Design by Jack McDade</a>
        </p>
    </footer>

    <script src="../../assets/js/laravel.js"></script>
    <script src="../../assets/js/viewport-units-buggyfill.js"></script>
    <script>
        window.viewportUnitsBuggyfill.init();
    </script>
    <script type="text/javascript">
        var _bdhmProtocol = (("https:" == document.location.protocol) ? " https://" : " http://");
        document.write(unescape("%3Cscript src='" + _bdhmProtocol + "hm.baidu.com/h.js%3Fc8d13872a523d9c286aa7affbe0921f1' type='text/javascript'%3E%3C/script%3E"));
    </script>
</body>

</html>