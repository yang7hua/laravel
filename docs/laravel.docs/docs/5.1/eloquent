<!doctype html>
<html lang="zh-CN">

<head>
    <meta charset="utf-8">
    <title>Eloquent：入门 - Laravel 5.1 中文文档 | Laravel 中文网</title>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta name="author" content="Laravel 中文网">
    <meta name="description" content="Laravel - 为 WEB 艺术家创造的 PHP 框架。| Laravel 中文网">
    <meta name="keywords" content="Laravel中文社区,php框架,laravel中文网,php framework,restful routing,laravel,laravel php">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!--[if lte IE 9]>
		<script src="http://cdn.bootcss.com/html5shiv/3.7.2/html5shiv.min.js"></script>
	<![endif]-->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="../../assets/css/laravel.css">
    <link rel="stylesheet" href="../../assets/css/patch.css">
</head>

<body class="docs language-php">

    <span class="overlay"></span>

    <nav class="main">
        <div class="container">
            <a href="http://www.golaravel.com/laravel/" class="brand">
                <img src="../../assets/img/laravel-logo.png" height="30"> Laravel
            </a>

            <div class="responsive-sidebar-nav">
                <a href="eloquent#" class="toggle-slide menu-link btn">&#9776;</a>
            </div>

            <div class="switcher">
                <div class="dropdown">
                    <button class="btn dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-expanded="true">
                        <!--<span class="faint">v</span> -->
                        5.1
                        <span class="caret"></span>
                    </button>
                    <ul class="dropdown-menu" role="menu" aria-labelledby="dropdownMenu1">
                        <li role="presentation">
                            <a role="menuitem" tabindex="-1" href="index.html">5.1</a>
                        </li>
                        <li role="presentation">
                            <a role="menuitem" tabindex="-1" href="http://www.golaravel.com/laravel/docs/5.0">5.0</a>
                        </li>
                        <li role="presentation">
                            <a role="menuitem" tabindex="-1" href="http://www.golaravel.com/laravel/docs/4.2">4.2</a>
                        </li>
                        <li role="presentation">
                            <a role="menuitem" tabindex="-1" href="http://www.golaravel.com/laravel/docs/4.1">4.1</a>
                        </li>
                        <li role="presentation">
                            <a role="menuitem" tabindex="-1" href="http://www.golaravel.com/laravel/docs/4.0">4.0</a>
                        </li>
                    </ul>
                </div>
            </div>

            <ul class="main-nav">
                <li class="nav-docs"><a href="http://www.golaravel.com/laravel/docs/">中文文档</a>
                </li>
                <li class="nav-community"><a href="http://wenda.golaravel.com" target="_blank">问答社区</a>
                </li>
                <li class="nav-api"><a href="http://laravel.com/api/5.0/" target="_blank">API</a>
                </li>
                <li class="nav-laracasts"><a href="https://laracasts.com" target="_blank">视频教程（国外）</a>
                </li>
                <li class="nav-forge"><a href="https://forge.laravel.com" target="_blank">Forge</a>
                </li>

            </ul>
        </div>
    </nav>

    <nav id="slide-menu" class="slide-menu" role="navigation">

        <div class="brand">
            <a href="http://www.golaravel.com/laravel/">
                <img src="../../assets/img/laravel-logo-white.png" height="50">
            </a>
        </div>

        <ul class="slide-main-nav">
            <li><a href="http://www.golaravel.com/laravel/">首页</a>
            </li>
            <li class="nav-docs"><a href="http://www.golaravel.com/laravel/docs/">中文文档</a>
            </li>
            <li class="nav-community"><a href="http://wenda.golaravel.com" target="_blank">问答社区</a>
            </li>
            <li class="nav-api"><a href="http://laravel.com/api/5.0/" target="_blank">API</a>
            </li>
            <li class="nav-laracasts"><a href="https://laracasts.com" target="_blank">视频教程（国外）</a>
            </li>
            <li class="nav-forge"><a href="https://forge.laravel.com" target="_blank">Forge</a>
            </li>

        </ul>

        <div class="slide-docs-nav">
            <h2>文档目录</h2>
            <ul>
                <li>序言
                    <ul>
                        <li><a href="releases">版本说明</a>
                        </li>
                        <li><a href="upgrade">升级指南</a>
                        </li>
                        <li><a href="contributions">贡献指南</a>
                        </li>
                        <li><a href="http://www.golaravel.com/laravel/api/5.1">API 文档</a>
                        </li>
                    </ul>
                </li>
                <li>安装设置
                    <ul>
                        <li><a href="installation">安装</a>
                        </li>
                        <li><a href="homestead">Homestead</a>
                        </li>
                    </ul>
                </li>
                <li>教程
                    <ul>
                        <li><a href="quickstart">入门学习任务</a>
                        </li>
                        <li><a href="quickstart-intermediate">中级学习任务</a>
                        </li>
                    </ul>
                </li>
                <li>基础知识
                    <ul>
                        <li><a href="routing">路由</a>
                        </li>
                        <li><a href="middleware">中间件</a>
                        </li>
                        <li><a href="controllers">控制器</a>
                        </li>
                        <li><a href="requests">请求</a>
                        </li>
                        <li><a href="responses">响应</a>
                        </li>
                        <li><a href="views">视图</a>
                        </li>
                        <li><a href="blade">Blade 模板</a>
                        </li>
                    </ul>
                </li>
                <li>系统架构
                    <ul>
                        <li><a href="lifecycle">请求的生命周期</a>
                        </li>
                        <li><a href="structure">应用程序结构</a>
                        </li>
                        <li><a href="providers">服务提供者</a>
                        </li>
                        <li><a href="container">服务容器</a>
                        </li>
                        <li><a href="contracts">Contract</a>
                        </li>
                        <li><a href="facades">Facade</a>
                        </li>
                    </ul>
                </li>
                <li>系统服务
                    <ul>
                        <li><a href="authentication">认证</a>
                        </li>
                        <li><a href="authorization">授权</a>
                        </li>
                        <li><a href="artisan">Artisan 控制台</a>
                        </li>
                        <li><a href="billing">计费</a>
                        </li>
                        <li><a href="cache">缓存</a>
                        </li>
                        <li><a href="collections">集合</a>
                        </li>
                        <li><a href="elixir">Elixir</a>
                        </li>
                        <li><a href="encryption">加密</a>
                        </li>
                        <li><a href="errors">错误与日志</a>
                        </li>
                        <li><a href="events">事件</a>
                        </li>
                        <li><a href="filesystem">文件系统 / 云存储</a>
                        </li>
                        <li><a href="hashing">哈希</a>
                        </li>
                        <li><a href="helpers">辅助方法</a>
                        </li>
                        <li><a href="localization">本地化</a>
                        </li>
                        <li><a href="mail">邮件</a>
                        </li>
                        <li><a href="packages">扩展包开发</a>
                        </li>
                        <li><a href="pagination">分页</a>
                        </li>
                        <li><a href="queues">队列</a>
                        </li>
                        <li><a href="redis">Redis</a>
                        </li>
                        <li><a href="session">会话</a>
                        </li>
                        <li><a href="envoy">SSH 任务</a>
                        </li>
                        <li><a href="scheduling">任务调度</a>
                        </li>
                        <li><a href="testing">测试</a>
                        </li>
                        <li><a href="validation">验证</a>
                        </li>
                    </ul>
                </li>
                <li>数据库
                    <ul>
                        <li><a href="database">入门</a>
                        </li>
                        <li><a href="queries">查询构造器</a>
                        </li>
                        <li><a href="migrations">迁移</a>
                        </li>
                        <li><a href="seeding">数据填充</a>
                        </li>
                    </ul>
                </li>
                <li>Eloquent ORM
                    <ul>
                        <li><a href="eloquent">入门</a>
                        </li>
                        <li><a href="eloquent-relationships">关系</a>
                        </li>
                        <li><a href="eloquent-collections">集合</a>
                        </li>
                        <li><a href="eloquent-mutators">调整修改</a>
                        </li>
                        <li><a href="eloquent-serialization">序列化</a>
                        </li>
                    </ul>
                </li>
            </ul>

        </div>

    </nav>

    <div class="docs-wrapper container">

        <section class="sidebar">
            <ul>
                <li>序言
                    <ul>
                        <li><a href="releases">版本说明</a>
                        </li>
                        <li><a href="upgrade">升级指南</a>
                        </li>
                        <li><a href="contributions">贡献指南</a>
                        </li>
                        <li><a href="http://www.golaravel.com/laravel/api/5.1">API 文档</a>
                        </li>
                    </ul>
                </li>
                <li>安装设置
                    <ul>
                        <li><a href="installation">安装</a>
                        </li>
                        <li><a href="homestead">Homestead</a>
                        </li>
                    </ul>
                </li>
                <li>教程
                    <ul>
                        <li><a href="quickstart">入门学习任务</a>
                        </li>
                        <li><a href="quickstart-intermediate">中级学习任务</a>
                        </li>
                    </ul>
                </li>
                <li>基础知识
                    <ul>
                        <li><a href="routing">路由</a>
                        </li>
                        <li><a href="middleware">中间件</a>
                        </li>
                        <li><a href="controllers">控制器</a>
                        </li>
                        <li><a href="requests">请求</a>
                        </li>
                        <li><a href="responses">响应</a>
                        </li>
                        <li><a href="views">视图</a>
                        </li>
                        <li><a href="blade">Blade 模板</a>
                        </li>
                    </ul>
                </li>
                <li>系统架构
                    <ul>
                        <li><a href="lifecycle">请求的生命周期</a>
                        </li>
                        <li><a href="structure">应用程序结构</a>
                        </li>
                        <li><a href="providers">服务提供者</a>
                        </li>
                        <li><a href="container">服务容器</a>
                        </li>
                        <li><a href="contracts">Contract</a>
                        </li>
                        <li><a href="facades">Facade</a>
                        </li>
                    </ul>
                </li>
                <li>系统服务
                    <ul>
                        <li><a href="authentication">认证</a>
                        </li>
                        <li><a href="authorization">授权</a>
                        </li>
                        <li><a href="artisan">Artisan 控制台</a>
                        </li>
                        <li><a href="billing">计费</a>
                        </li>
                        <li><a href="cache">缓存</a>
                        </li>
                        <li><a href="collections">集合</a>
                        </li>
                        <li><a href="elixir">Elixir</a>
                        </li>
                        <li><a href="encryption">加密</a>
                        </li>
                        <li><a href="errors">错误与日志</a>
                        </li>
                        <li><a href="events">事件</a>
                        </li>
                        <li><a href="filesystem">文件系统 / 云存储</a>
                        </li>
                        <li><a href="hashing">哈希</a>
                        </li>
                        <li><a href="helpers">辅助方法</a>
                        </li>
                        <li><a href="localization">本地化</a>
                        </li>
                        <li><a href="mail">邮件</a>
                        </li>
                        <li><a href="packages">扩展包开发</a>
                        </li>
                        <li><a href="pagination">分页</a>
                        </li>
                        <li><a href="queues">队列</a>
                        </li>
                        <li><a href="redis">Redis</a>
                        </li>
                        <li><a href="session">会话</a>
                        </li>
                        <li><a href="envoy">SSH 任务</a>
                        </li>
                        <li><a href="scheduling">任务调度</a>
                        </li>
                        <li><a href="testing">测试</a>
                        </li>
                        <li><a href="validation">验证</a>
                        </li>
                    </ul>
                </li>
                <li>数据库
                    <ul>
                        <li><a href="database">入门</a>
                        </li>
                        <li><a href="queries">查询构造器</a>
                        </li>
                        <li><a href="migrations">迁移</a>
                        </li>
                        <li><a href="seeding">数据填充</a>
                        </li>
                    </ul>
                </li>
                <li>Eloquent ORM
                    <ul>
                        <li><a href="eloquent">入门</a>
                        </li>
                        <li><a href="eloquent-relationships">关系</a>
                        </li>
                        <li><a href="eloquent-collections">集合</a>
                        </li>
                        <li><a href="eloquent-mutators">调整修改</a>
                        </li>
                        <li><a href="eloquent-serialization">序列化</a>
                        </li>
                    </ul>
                </li>
            </ul>

        </section>

        <article>
            <h1>Eloquent：入门</h1>
            <ul>
                <li><a href="eloquent#introduction">简介</a>
                </li>
                <li><a href="eloquent#defining-models">定义模型（model）</a>
                    <ul>
                        <li><a href="eloquent#eloquent-model-conventions">Eloquent Model Conventions</a>
                        </li>
                    </ul>
                </li>
                <li><a href="eloquent#retrieving-multiple-models">Retrieving Multiple Models</a>
                </li>
                <li><a href="eloquent#retrieving-single-models">Retrieving Single Models / Aggregates</a>
                    <ul>
                        <li><a href="eloquent#retrieving-aggregates">Retrieving Aggregates</a>
                        </li>
                    </ul>
                </li>
                <li><a href="eloquent#inserting-and-updating-models">Inserting &amp; Updating Models</a>
                    <ul>
                        <li><a href="eloquent#basic-inserts">Basic Inserts</a>
                        </li>
                        <li><a href="eloquent#basic-updates">Basic Updates</a>
                        </li>
                        <li><a href="eloquent#mass-assignment">Mass Assignment</a>
                        </li>
                    </ul>
                </li>
                <li><a href="eloquent#deleting-models">Deleting Models</a>
                    <ul>
                        <li><a href="eloquent#soft-deleting">Soft Deleting</a>
                        </li>
                        <li><a href="eloquent#querying-soft-deleted-models">Querying Soft Deleted Models</a>
                        </li>
                    </ul>
                </li>
                <li><a href="eloquent#query-scopes">Query Scopes</a>
                </li>
                <li><a href="eloquent#events">Events</a>
                </li>
            </ul>
            <p>
                <a name="introduction"></a>
            </p>
            <h2>简介</h2>
            <p>Laravel 所自带的 Eloquent ORM 是一个优美、简洁的 ActiveRecord 实现，用来实现数据库操作。每个数据表都有一个与之相对应的“模型（Model）”，用于和数据表交互。模型（model）帮助你在数据表中查询数据，以及向数据表内插入新的记录.</p>
            <p>在开始之前，请务必在 <code>config/database.php</code> 文件中正确配置数据库的连接参数。如需更多数据库配置方面的信息，请查看<a href="database#configuration">此文档</a>。</p>
            <p>
                <a name="defining-models"></a>
            </p>
            <h2>定义模型（model）</h2>
            <p>开始讲解前，我们先来创建一个 Eloquent 模型（model）。模型（model）文件通常被放在 <code>app</code> 目录下，但是，你也可以将其放置于任何地方，只要能够通过 <code>composer.json</code> 配置文件自动加载即可。所有的 Eloquent 模型（model）都继承自 <code>Illuminate\Database\Eloquent\Model</code> 类。</p>
            <p>创建一个模型（model）实例的最简单方法是使用 <a href="artisan">Artisan 命令行工具</a> 的 <code>make:model</code> 指令：</p>
            <pre><code>php artisan make:model User
</code></pre>
            <p>如果你希望在生成模型（model）的同时生成 <a href="migrations">数据库将迁移</a> ，可以通过添加 <code>--migration</code> 或 <code>-m</code> 参数来实现：</p>
            <pre><code>php artisan make:model User --migration

php artisan make:model User -m
</code></pre>
            <p>
                <a name="eloquent-model-conventions"></a>
            </p>
            <h3>Eloquent 模型规范</h3>
            <p>现在，让我们来看一个 <code>Flight</code> 模型类（model class），我们用它从 <code>flights</code> 数据表中存取信息：</p>
            <pre><code>&lt;?php

namespace App;

use Illuminate\Database\Eloquent\Model;

class Flight extends Model
{
    //
}
</code></pre>
            <h4>数据表的表名</h4>
            <p>注意，我们并没有告诉 Eloquent 将 <code>Flight</code> 模型（model）和哪个数据表进行关联。默认的规则是：类名的复数形式用来当做数据表的表名，除非明确指定另一个名称。所以，在这种情况下，Eloquent 将自动推导出 <code>Flight</code> 模型与 <code>flights</code> 数据表关联。你可以在模型（model）中定义一个 <code>table</code> 属性，用来指定另一个数据表名称：</p>
            <pre><code>&lt;?php

namespace App;

use Illuminate\Database\Eloquent\Model;

class Flight extends Model
{
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'my_flights';
}
</code></pre>
            <h4>主键</h4>
            <p>Eloquent 假定每一个数据表中都存在一个命名为 <code>id</code> 的列作为主键。你可以通过定义一个 <code>$primaryKey</code> 属性来明确指定一个主键。</p>
            <h4>时间戳</h4>
            <p>默认情况下，Eloquent 期望数据表中存在 <code>created_at</code> 和 <code>updated_at</code> 字段。如果你不希望由 Eloquent 来管理这两个字段，可以在模型（model）中将 <code>$timestamps</code> 属性设置为 <code>false</code>：</p>
            <pre><code>&lt;?php

namespace App;

use Illuminate\Database\Eloquent\Model;

class Flight extends Model
{
    /**
     * Indicates if the model should be timestamped.
     *
     * @var bool
     */
    public $timestamps = false;
}
</code></pre>
            <p>如果你需要定制时间戳的格式，可以通过在模型（model）中设置 <code>$dateFormat</code> 属性来实现。这个属性决定了日期属性如何在数据库中存储，也决定当模型（model）被序列化为数组 或者 JSON 格式时日期属性的格式：</p>
            <pre><code>&lt;?php

namespace App;

use Illuminate\Database\Eloquent\Model;

class Flight extends Model
{
    /**
     * The storage format of the model's date columns.
     *
     * @var string
     */
    protected $dateFormat = 'U';
}
</code></pre>
            <h4>Database Connection</h4>
            <p>By default, all Eloquent models will use the default database connection configured for your application. If you would like to specify a different connection for the model, use the <code>$connection</code> property:</p>
            <pre><code>&lt;?php

namespace App;

use Illuminate\Database\Eloquent\Model;

class Flight extends Model
{
    /**
     * The connection name for the model.
     *
     * @var string
     */
    protected $connection = 'connection-name';
}
</code></pre>
            <p>
                <a name="retrieving-multiple-models"></a>
            </p>
            <h2>获取多个模型</h2>
            <p>一旦你创建了一个模型（model）并将其<a href="migrations#writing-migrations">关联到了一个数据表</a>，你就可以从数据库中获取数据了。将每一个 Eloquent 模型（model）想象为一个强大的<a href="queries">查询构造器</a>，该查询构造器能够帮你通过模型（model）从数据库中查询需要的数据。例如：</p>
            <pre><code>&lt;?php

namespace App\Http\Controllers;

use App\Flight;
use App\Http\Controllers\Controller;

class FlightController extends Controller
{
    /**
     * Show a list of all available flights.
     *
     * @return Response
     */
    public function index()
    {
        $flights = Flight::all();

        return view('flight.index', ['flights' =&gt; $flights]);
    }
}
</code></pre>
            <h4>获取字段的值</h4>
            <p>对于任何一个 Eloquent 模型（model）实例，都可以将字段名当做模型（model）的属性，从而相对应的属性来获取对应的字段的 值，例如，我们将查询之后获得的所有 <code>Flight</code> 实例挨个遍历，并且输出每个实例的 <code>name</code> 字段的值:</p>
            <pre><code>foreach ($flights as $flight) {
    echo $flight-&gt;name;
}
</code></pre>
            <h4>Adding Additional Constraints</h4>
            <p>The Eloquent <code>all</code> method will return all of the results in the model's table. Since each Eloquent model serves as a <a href="queries">query builder</a>, you may also add constraints to queries, and then use the <code>get</code>                method to retrieve the results:</p>
            <pre><code>$flights = App\Flight::where('active', 1)
               -&gt;orderBy('name', 'desc')
               -&gt;take(10)
               -&gt;get();
</code></pre>
            <blockquote>
                <p><strong>Note:</strong> Since Eloquent models are query builders, you should review all of the methods available on the <a href="queries">query builder</a>. You may use any of these methods in your Eloquent queries.</p>
            </blockquote>
            <h4>Collections</h4>
            <p>For Eloquent methods like <code>all</code> and <code>get</code> which retrieve multiple results, an instance of <code>Illuminate\Database\Eloquent\Collection</code> will be returned. The <code>Collection</code> class provides <a href="eloquent-collections#available-methods">a variety of helpful methods</a>                for working with your Eloquent results. Of course, you may simply loop over this collection like an array:</p>
            <pre><code>foreach ($flights as $flight) {
    echo $flight-&gt;name;
}
</code></pre>
            <h4>Chunking Results</h4>
            <p>If you need to process thousands of Eloquent records, use the <code>chunk</code> command. The <code>chunk</code> method will retrieve a &quot;chunk&quot; of Eloquent models, feeding them to a given <code>Closure</code> for processing. Using
                the <code>chunk</code> method will conserve memory when working with large result sets:</p>
            <pre><code>Flight::chunk(200, function ($flights) {
    foreach ($flights as $flight) {
        //
    }
});
</code></pre>
            <p>The first argument passed to the method is the number of records you wish to receive per &quot;chunk&quot;. The Closure passed as the second argument will be called for each chunk that is retrieved from the database.</p>
            <p>
                <a name="retrieving-single-models"></a>
            </p>
            <h2>Retrieving Single Models / Aggregates</h2>
            <p>Of course, in addition to retrieving all of the records for a given table, you may also retrieve single records using <code>find</code> and <code>first</code>. Instead of returning a collection of models, these methods return a single model
                instance:</p>
            <pre><code>// Retrieve a model by its primary key...
$flight = App\Flight::find(1);

// Retrieve the first model matching the query constraints...
$flight = App\Flight::where('active', 1)-&gt;first();
</code></pre>
            <h4>Not Found Exceptions</h4>
            <p>Sometimes you may wish to throw an exception if a model is not found. This is particularly useful in routes or controllers. The <code>findOrFail</code> and <code>firstOrFail</code> methods will retrieve the first result of the query. However,
                if no result is found, a <code>Illuminate\Database\Eloquent\ModelNotFoundException</code> will be thrown:</p>
            <pre><code>$model = App\Flight::findOrFail(1);

$model = App\Flight::where('legs', '&gt;', 100)-&gt;firstOrFail();
</code></pre>
            <p>If the exception is not caught, a <code>404</code> HTTP response is automatically sent back to the user, so it is not necessary to write explicit checks to return <code>404</code> responses when using these methods:</p>
            <pre><code>Route::get('/api/flights/{id}', function ($id) {
    return App\Flight::findOrFail($id);
});
</code></pre>
            <p>
                <a name="retrieving-aggregates"></a>
            </p>
            <h3>Retrieving Aggregates</h3>
            <p>Of course, you may also use <code>count</code>, <code>sum</code>, <code>max</code>, and other <a href="queries#aggregates">aggregate functions</a> provided by the <a href="queries">query builder</a>. These methods return
                the appropriate scalar value instead of a full model instance:</p>
            <pre><code>$count = App\Flight::where('active', 1)-&gt;count();

$max = App\Flight::where('active', 1)-&gt;max('price');
</code></pre>
            <p>
                <a name="inserting-and-updating-models"></a>
            </p>
            <h2>Inserting &amp; Updating Models</h2>
            <p>
                <a name="basic-inserts"></a>
            </p>
            <h3>基本的插入操作</h3>
            <p>如需在数据库中新建一条记录，只要简单地新建一个模型（model）实例，然后为此实例设置属性，最后调用 <code>save</code> 方法：</p>
            <pre><code>&lt;?php

namespace App\Http\Controllers;

use App\Flight;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;

class FlightController extends Controller
{
    /**
     * Create a new flight instance.
     *
     * @param  Request  $request
     * @return Response
     */
    public function store(Request $request)
    {
        // Validate the request...

        $flight = new Flight;

        $flight-&gt;name = $request-&gt;name;

        $flight-&gt;save();
    }
}
</code></pre>
            <p>在上面这个例子中，我们把通过 HTTP 请求传进来的 <code>name</code> 参数直接赋值给 <code>App\Flight</code> 模型实例的 <code>name</code> 属性。当我们调用 <code>save</code> 方法时就会向数据库中插入一条记录。当调用 <code>save</code> 方法时 <code>created_at</code> 和 <code>updated_at</code> 时间戳就会被自动更新，不需要我们自己动手。</p>
            <p>
                <a name="basic-updates"></a>
            </p>
            <h3>基本的更新操作</h3>
            <p><code>save</code> 方法可以用于更新数据库中已经存在的模型（model）。为了更新一个模型（model），首先你必须从数据库中将其取出，然后为需要更新的属性赋值，最后调用 <code>save</code> 方法。此外，<code>updated_at</code> 时间戳会被自动更新，所以不需要手动设置 <code>updated_at</code> 的值：</p>
            <pre><code>$flight = App\Flight::find(1);

$flight-&gt;name = 'New Flight Name';

$flight-&gt;save();
</code></pre>
            <p>更新操作也可以在符合指定查询条件的多个模型实例上进行。在下面例子中，所有标记为 <code>active</code> 并且 <code>destination</code> 是 <code>San Diego</code> 的飞机都被标记为延时：</p>
            <pre><code>App\Flight::where('active', 1)
          -&gt;where('destination', 'San Diego')
          -&gt;update(['delayed' =&gt; 1]);
</code></pre>
            <p>传递给 <code>update</code> 方法的参数必须是一个数组，数组中包含的是一系列键值对，分别对应需要更新的字段名称和更新后的值。</p>
            <p>
                <a name="mass-assignment"></a>
            </p>
            <h3>批量赋值</h3>
            <p>You may also use the <code>create</code> method to save a new model in a single line. The inserted model instance will be returned to you from the method. However, before doing so, you will need to specify either a <code>fillable</code> or
                <code>guarded</code> attribute on the model, as all Eloquent models protect against mass-assignment.</p>
            <p>A mass-assignment vulnerability occurs when a user passes an unexpected HTTP parameter through a request, and that parameter changes a column in your database you did not expect. For example, a malicious user might send an <code>is_admin</code>                parameter through an HTTP request, which is then mapped onto your model's <code>create</code> method, allowing the user to escalate themselves to an administrator.</p>
            <p>So, to get started, you should define which model attributes you want to make mass assignable. You may do this using the <code>$fillable</code> property on the model. For example, let's make the <code>name</code> attribute of our <code>Flight</code>                model mass assignable:</p>
            <pre><code>&lt;?php

namespace App;

use Illuminate\Database\Eloquent\Model;

class Flight extends Model
{
    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = ['name'];
}
</code></pre>
            <p>Once we have made the attributes mass assignable, we can use the <code>create</code> method to insert a new record in the database. The <code>create</code> method returns the saved model instance:</p>
            <pre><code>$flight = App\Flight::create(['name' =&gt; 'Flight 10']);
</code></pre>
            <p>While <code>$fillable</code> serves as a &quot;white list&quot; of attributes that should be mass assignable, you may also choose to use <code>$guarded</code>. The <code>$guarded</code> property should contain an array of attributes that you
                do not want to be mass assignable. All other attributes not in the array will be mass assignable. So, <code>$guarded</code> functions like a &quot;black list&quot;. Of course, you should use either <code>$fillable</code> or <code>$guarded</code>                - not both:</p>
            <pre><code>&lt;?php

namespace App;

use Illuminate\Database\Eloquent\Model;

class Flight extends Model
{
    /**
     * The attributes that aren't mass assignable.
     *
     * @var array
     */
    protected $guarded = ['price'];
}
</code></pre>
            <p>In the example above, all attributes <strong>except for <code>price</code></strong> will be mass assignable.</p>
            <h4>Other Creation Methods</h4>
            <p>There are two other methods you may use to create models by mass assigning attributes: <code>firstOrCreate</code> and <code>firstOrNew</code>. The <code>firstOrCreate</code> method will attempt to locate a database record using the given column
                / value pairs. If the model can not be found in the database, a record will be inserted with the given attributes.</p>
            <p>The <code>firstOrNew</code> method, like <code>firstOrCreate</code> will attempt to locate a record in the database matching the given attributes. However, if a model is not found, a new model instance will be returned. Note that the model
                returned by <code>firstOrNew</code> has not yet been persisted to the database. You will need to call <code>save</code> manually to persist it:</p>
            <pre><code>// Retrieve the flight by the attributes, or create it if it doesn't exist...
$flight = App\Flight::firstOrCreate(['name' =&gt; 'Flight 10']);

// Retrieve the flight by the attributes, or instantiate a new instance...
$flight = App\Flight::firstOrNew(['name' =&gt; 'Flight 10']);
</code></pre>
            <p>
                <a name="deleting-models"></a>
            </p>
            <h2>Deleting Models</h2>
            <p>To delete a model, call the <code>delete</code> method on a model instance:</p>
            <pre><code>$flight = App\Flight::find(1);

$flight-&gt;delete();
</code></pre>
            <h4>Deleting An Existing Model By Key</h4>
            <p>In the example above, we are retrieving the model from the database before calling the <code>delete</code> method. However, if you know the primary key of the model, you may delete the model without retrieving it. To do so, call the <code>destroy</code>                method:</p>
            <pre><code>App\Flight::destroy(1);

App\Flight::destroy([1, 2, 3]);

App\Flight::destroy(1, 2, 3);
</code></pre>
            <h4>Deleting Models By Query</h4>
            <p>Of course, you may also run a delete query on a set of models. In this example, we will delete all flights that are marked as inactive:</p>
            <pre><code>$deletedRows = App\Flight::where('active', 0)-&gt;delete();
</code></pre>
            <p>
                <a name="soft-deleting"></a>
            </p>
            <h3>Soft Deleting</h3>
            <p>In addition to actually removing records from your database, Eloquent can also &quot;soft delete&quot; models. When models are soft deleted, they are not actually removed from your database. Instead, a <code>deleted_at</code> attribute is
                set on the model and inserted into the database. If a model has a non-null <code>deleted_at</code> value, the model has been soft deleted. To enable soft deletes for a model, use the <code>Illuminate\Database\Eloquent\SoftDeletes</code>                trait on the model and add the <code>deleted_at</code> column to your <code>$dates</code> property:</p>
            <pre><code>&lt;?php

namespace App;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class Flight extends Model
{
    use SoftDeletes;

    /**
     * The attributes that should be mutated to dates.
     *
     * @var array
     */
    protected $dates = ['deleted_at'];
}
</code></pre>
            <p>Of course, you should add the <code>deleted_at</code> column to your database table. The Laravel <a href="migrations">schema builder</a> contains a helper method to create this column:</p>
            <pre><code>Schema::table('flights', function ($table) {
    $table-&gt;softDeletes();
});
</code></pre>
            <p>Now, when you call the <code>delete</code> method on the model, the <code>deleted_at</code> column will be set to the current date and time. And, when querying a model that uses soft deletes, the soft deleted models will automatically be excluded
                from all query results.</p>
            <p>To determine if a given model instance has been soft deleted, use the <code>trashed</code> method:</p>
            <pre><code>if ($flight-&gt;trashed()) {
    //
}
</code></pre>
            <p>
                <a name="querying-soft-deleted-models"></a>
            </p>
            <h3>Querying Soft Deleted Models</h3>
            <h4>Including Soft Deleted Models</h4>
            <p>As noted above, soft deleted models will automatically be excluded from query results. However, you may force soft deleted models to appear in a result set using the <code>withTrashed</code> method on the query:</p>
            <pre><code>$flights = App\Flight::withTrashed()
                -&gt;where('account_id', 1)
                -&gt;get();
</code></pre>
            <p>The <code>withTrashed</code> method may also be used on a <a href="eloquent-relationships">relationship</a> query:</p>
            <pre><code>$flight-&gt;history()-&gt;withTrashed()-&gt;get();
</code></pre>
            <h4>Where Clause Caveats</h4>
            <p>When adding <code>orWhere</code> clauses to your queries on soft deleted models, always use <a href="http://laravel.com/docs/5.1/queries#advanced-where-clauses" target="_blank">advance where clauses</a> to logically group the <code>WHERE</code> clauses. For
                example:</p>
            <pre><code>User::where(function($query) {
        $query-&gt;where('name', '=', 'John')
              -&gt;orWhere('votes', '&gt;', 100);
        })
        -&gt;get();
</code></pre>
            <p>This will produce the following SQL:</p>
            <pre><code>select * from `users` where `users`.`deleted_at` is null and (`name` = 'John' or `votes` &gt; 100)
</code></pre>
            <p>If the <code>orWhere</code> clause is not grouped, it will produce the following SQL which will contain soft deleted records:</p>
            <pre><code>select * from `users` where `users`.`deleted_at` is null and `name` = 'John' or `votes` &gt; 100
</code></pre>
            <h4>Retrieving Only Soft Deleted Models</h4>
            <p>The <code>onlyTrashed</code> method will retrieve <strong>only</strong> soft deleted models:</p>
            <pre><code>$flights = App\Flight::onlyTrashed()
                -&gt;where('airline_id', 1)
                -&gt;get();
</code></pre>
            <h4>Restoring Soft Deleted Models</h4>
            <p>Sometimes you may wish to &quot;un-delete&quot; a soft deleted model. To restore a soft deleted model into an active state, use the <code>restore</code> method on a model instance:</p>
            <pre><code>$flight-&gt;restore();
</code></pre>
            <p>You may also use the <code>restore</code> method in a query to quickly restore multiple models:</p>
            <pre><code>App\Flight::withTrashed()
        -&gt;where('airline_id', 1)
        -&gt;restore();
</code></pre>
            <p>Like the <code>withTrashed</code> method, the <code>restore</code> method may also be used on <a href="eloquent-relationships">relationships</a>:</p>
            <pre><code>$flight-&gt;history()-&gt;restore();
</code></pre>
            <h4>Permanently Deleting Models</h4>
            <p>Sometimes you may need to truly remove a model from your database. To permanently remove a soft deleted model from the database, use the <code>forceDelete</code> method:</p>
            <pre><code>// Force deleting a single model instance...
$flight-&gt;forceDelete();

// Force deleting all related models...
$flight-&gt;history()-&gt;forceDelete();
</code></pre>
            <p>
                <a name="query-scopes"></a>
            </p>
            <h2>Query Scopes</h2>
            <p>Scopes allow you to define common sets of constraints that you may easily re-use throughout your application. For example, you may need to frequently retrieve all users that are considered &quot;popular&quot;. To define a scope, simply prefix
                an Eloquent model method with <code>scope</code>.</p>
            <p>Scopes should always return a query builder instance:</p>
            <pre><code>&lt;?php

namespace App;

use Illuminate\Database\Eloquent\Model;

class User extends Model
{
    /**
     * Scope a query to only include popular users.
     *
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function scopePopular($query)
    {
        return $query-&gt;where('votes', '&gt;', 100);
    }

    /**
     * Scope a query to only include active users.
     *
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function scopeActive($query)
    {
        return $query-&gt;where('active', 1);
    }
}
</code></pre>
            <h4>Utilizing A Query Scope</h4>
            <p>Once the scope has been defined, you may call the scope methods when querying the model. However, you do not need to include the <code>scope</code> prefix when calling the method. You can even chain calls to various scopes, for example:</p>
            <pre><code>$users = App\User::popular()-&gt;active()-&gt;orderBy('created_at')-&gt;get();
</code></pre>
            <h4>Dynamic Scopes</h4>
            <p>Sometimes you may wish to define a scope that accepts parameters. To get started, just add your additional parameters to your scope. Scope parameters should be defined after the <code>$query</code> argument:</p>
            <pre><code>&lt;?php

namespace App;

use Illuminate\Database\Eloquent\Model;

class User extends Model
{
    /**
     * Scope a query to only include users of a given type.
     *
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function scopeOfType($query, $type)
    {
        return $query-&gt;where('type', $type);
    }
}
</code></pre>
            <p>Now, you may pass the parameters when calling the scope:</p>
            <pre><code>$users = App\User::ofType('admin')-&gt;get();
</code></pre>
            <p>
                <a name="events"></a>
            </p>
            <h2>事件</h2>
            <p>Eloquent models fire several events, allowing you to hook into various points in the model's lifecycle using the following methods: <code>creating</code>, <code>created</code>, <code>updating</code>, <code>updated</code>, <code>saving</code>,
                <code>saved</code>, <code>deleting</code>, <code>deleted</code>, <code>restoring</code>, <code>restored</code>. Events allow you to easily execute code each time a specific model class is saved or updated in the database.</p>
            <p>Eloquent 模型（model）能够触发多个事件，通过调用下面所列出的方法，你可以在模型（model）的生命周期中的每个“关键点”上执行自己的代码，从而影响模型（model）的执行流程：<code>creating</code>、<code>created</code>、<code>updating</code>、<code>updated</code>、<code>saving、</code>saved<code>、</code>deleting<code>、</code>deleted<code>、</code>restoring<code>、</code>restored`。每当某个模型（model）被保存或更新到数据库中时，你都能通过事件轻松地插入自己编写的代码并让它执行。</p>
            <p>
                <a name="basic-usage"></a>
            </p>
            <h3>基本用法</h3>
            <p>每当一个新模型（model）头一次被保存时，都将触发 <code>creating</code> 和 <code>created</code> 事件。 如果模型（model）已经存在于数据库中，并且 <code>save</code> 方法被调用了，将触发 <code>updating</code> / <code>updated</code> 事件。无论如何，<code>saving</code> / <code>saved</code> 事件都会被触发。</p>
            <p>例如，我们在一个<a href="providers">服务提供者（service provider）</a> 中定义一个 Eloquent 事件监听器。在我们的事件监听器中，我们要在给定的模型（model）上调用 <code>isValid</code> 方法，如果该模型（model）是无效的，则返回 <code>false</code> 。如果 Eloquent 事件监听器中返回的是 <code>false</code> ，将取消 <code>save</code>                / <code>update</code> 操作：</p>
            <pre><code>&lt;?php

namespace App\Providers;

use App\User;
use Illuminate\Support\ServiceProvider;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Bootstrap any application services.
     *
     * @return void
     */
    public function boot()
    {
        User::creating(function ($user) {
            if ( ! $user-&gt;isValid()) {
                return false;
            }
        });
    }

    /**
     * Register the service provider.
     *
     * @return void
     */
    public function register()
    {
        //
    }
}
</code></pre>

        </article>
    </div>


    <footer class="main">
        <ul>
            <li class="nav-docs"><a href="http://www.golaravel.com/laravel/docs/">中文文档</a>
            </li>
            <li class="nav-community"><a href="http://wenda.golaravel.com" target="_blank">问答社区</a>
            </li>
            <li class="nav-api"><a href="http://laravel.com/api/5.0/" target="_blank">API</a>
            </li>
            <li class="nav-laracasts"><a href="https://laracasts.com" target="_blank">视频教程（国外）</a>
            </li>
            <li class="nav-forge"><a href="https://forge.laravel.com" target="_blank">Forge</a>
            </li>

        </ul>
        <p>Laravel is a trademark of Taylor Otwell. Copyright &copy; Taylor Otwell.</p>
        <p class="less-significant"><a href="http://jackmcdade.com" target="_blank">Design by Jack McDade</a>
        </p>
    </footer>

    <script src="../../assets/js/laravel.js"></script>
    <script src="../../assets/js/viewport-units-buggyfill.js"></script>
    <script>
        window.viewportUnitsBuggyfill.init();
    </script>
    <script type="text/javascript">
        var _bdhmProtocol = (("https:" == document.location.protocol) ? " https://" : " http://");
        document.write(unescape("%3Cscript src='" + _bdhmProtocol + "hm.baidu.com/h.js%3Fc8d13872a523d9c286aa7affbe0921f1' type='text/javascript'%3E%3C/script%3E"));
    </script>
</body>

</html>